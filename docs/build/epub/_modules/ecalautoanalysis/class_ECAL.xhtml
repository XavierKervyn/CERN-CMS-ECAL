<!DOCTYPE html>

<html xmlns="http://www.w3.org/1999/xhtml" xmlns:epub="http://www.idpf.org/2007/ops">
  <head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>ecalautoanalysis.class_ECAL</title>
    <link rel="stylesheet" href="../../_static/pygments.css" type="text/css" />
    <link rel="stylesheet" href="../../_static/epub.css" type="text/css" /> 
  </head><body>

    <div class="document">
      <div class="documentwrapper">
          <div class="body" role="main">
            
  <h1>Source code for ecalautoanalysis.class_ECAL</h1><div class="highlight"><pre>
<span></span><span class="sd">&quot;&quot;&quot; Imports &quot;&quot;&quot;</span>

<span class="kn">import</span> <span class="nn">uproot</span>
<span class="kn">import</span> <span class="nn">numpy</span> <span class="k">as</span> <span class="nn">np</span>
<span class="kn">import</span> <span class="nn">pandas</span> <span class="k">as</span> <span class="nn">pd</span>
<span class="kn">import</span> <span class="nn">os</span>
<span class="kn">import</span> <span class="nn">awkward</span> <span class="k">as</span> <span class="nn">ak</span>
<span class="kn">import</span> <span class="nn">plotly.express</span> <span class="k">as</span> <span class="nn">px</span>
<span class="kn">from</span> <span class="nn">plotly.subplots</span> <span class="kn">import</span> <span class="n">make_subplots</span>
<span class="kn">from</span> <span class="nn">matplotlib</span> <span class="kn">import</span> <span class="n">pyplot</span> <span class="k">as</span> <span class="n">plt</span>
<span class="kn">from</span> <span class="nn">scipy.optimize</span> <span class="kn">import</span> <span class="n">curve_fit</span>
<span class="kn">from</span> <span class="nn">decimal</span> <span class="kn">import</span> <span class="o">*</span>
<span class="kn">from</span> <span class="nn">pathlib</span> <span class="kn">import</span> <span class="n">Path</span>
<span class="kn">from</span> <span class="nn">typing</span> <span class="kn">import</span> <span class="o">*</span>


<span class="sd">&quot;&quot;&quot; Global variables &quot;&quot;&quot;</span>

<span class="n">save_folder_global</span> <span class="o">=</span> <span class="s1">&#39;Statistics&#39;</span> <span class="c1"># Processed data from will be stored in a folder named like this. </span>
<span class="n">raw_data_folder_global</span> <span class="o">=</span> <span class="s1">&#39;/eos/home-s/spigazzi/Lab21/data/Reco/&#39;</span> <span class="c1"># Raw data is stored here</span>
<span class="n">plot_save_folder_global</span> <span class="o">=</span> <span class="s1">&#39;Plots&#39;</span> <span class="c1"># Produced plots will be saved here</span>


<span class="k">def</span> <span class="nf">gaussian</span><span class="p">(</span><span class="n">x</span><span class="p">:</span> <span class="nb">float</span><span class="o">=</span><span class="kc">None</span><span class="p">,</span> <span class="o">*</span><span class="n">p</span><span class="p">:</span> <span class="nb">tuple</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="nb">float</span><span class="p">:</span>
    <span class="sd">&quot;&quot;&quot;</span>
<span class="sd">    Returns a gaussian function with amplitude A, mean mu and std deviation sigma evaluated at x</span>
<span class="sd">    </span>
<span class="sd">    :param x: point at which the function is evaluated</span>
<span class="sd">    :param p: parameters of the gaussian; amplitude, mean, std deviation</span>
<span class="sd">    :return: gaussian evaluated at the point x</span>
<span class="sd">    &quot;&quot;&quot;</span>
    <span class="n">A</span><span class="p">,</span> <span class="n">mu</span><span class="p">,</span> <span class="n">sigma</span> <span class="o">=</span> <span class="n">p</span>
    <span class="k">return</span> <span class="n">A</span> <span class="o">*</span> <span class="n">np</span><span class="o">.</span><span class="n">exp</span><span class="p">(</span><span class="o">-</span><span class="p">(</span><span class="n">x</span> <span class="o">-</span><span class="n">mu</span><span class="p">)</span><span class="o">**</span><span class="mi">2</span><span class="o">/</span><span class="p">(</span><span class="mi">2</span><span class="o">*</span><span class="n">sigma</span><span class="o">**</span><span class="mi">2</span><span class="p">))</span>


<span class="k">def</span> <span class="nf">multiple_gaussians</span><span class="p">(</span><span class="n">x</span><span class="p">:</span> <span class="nb">float</span><span class="o">=</span><span class="kc">None</span><span class="p">,</span> <span class="o">*</span><span class="n">p</span><span class="p">:</span> <span class="nb">tuple</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="nb">float</span><span class="p">:</span>
    <span class="sd">&quot;&quot;&quot;</span>
<span class="sd">    Returns a sum of gaussians with parameters given by *p, evaluated at the point x</span>
<span class="sd">    </span>
<span class="sd">    :param x: point at which the function is evaluated</span>
<span class="sd">    :param p: parameters of the gaussians; [amplitude1, mean1, std deviation1, amplitude2, mean2, ...]</span>
<span class="sd">    :return: sum of gaussians evaluated at the point x</span>
<span class="sd">    &quot;&quot;&quot;</span>
    <span class="c1"># TODO: exception if n_fit is not odd</span>
    <span class="n">n_fit</span> <span class="o">=</span> <span class="nb">int</span><span class="p">(</span><span class="nb">len</span><span class="p">(</span><span class="n">p</span><span class="p">)</span><span class="o">/</span><span class="mi">3</span><span class="p">)</span> <span class="c1"># find the number of gaussians</span>
    <span class="n">res</span> <span class="o">=</span> <span class="mi">0</span>
    <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">n_fit</span><span class="p">):</span>
        <span class="n">coeff</span> <span class="o">=</span> <span class="p">[</span><span class="n">p</span><span class="p">[</span><span class="n">i</span><span class="o">*</span><span class="mi">3</span><span class="p">],</span> <span class="n">p</span><span class="p">[</span><span class="n">i</span><span class="o">*</span><span class="mi">3</span><span class="o">+</span><span class="mi">1</span><span class="p">],</span> <span class="n">p</span><span class="p">[</span><span class="n">i</span><span class="o">*</span><span class="mi">3</span><span class="o">+</span><span class="mi">2</span><span class="p">]]</span> <span class="c1"># pick the coefficients</span>
        <span class="n">res</span> <span class="o">+=</span> <span class="n">gaussian</span><span class="p">(</span><span class="n">x</span><span class="p">,</span> <span class="o">*</span><span class="n">coeff</span><span class="p">)</span> <span class="c1"># add each gaussian</span>
    <span class="k">return</span> <span class="n">res</span>


<span class="sd">&quot;&quot;&quot; Parent Class definition &quot;&quot;&quot;</span>

<div class="viewcode-block" id="ECAL"><a class="viewcode-back" href="../../index.xhtml#ecalautoanalysis.ECAL">[docs]</a><span class="k">class</span> <span class="nc">ECAL</span><span class="p">:</span>
    <span class="sd">&quot;&quot;&quot;</span>
<span class="sd">    This class is the parent class of Amplitude, Time_Delta and Amplitude_Delta. It contains the attributes and methods </span>
<span class="sd">    that are to be inherited to the entire code structure. This class should be understood as &#39;virtual&#39;, in the sense that</span>
<span class="sd">    it is not possible to have an instance of ECAL.</span>
<span class="sd">    </span>
<span class="sd">    :param included_runs: run numbers to be analysed, eg. [15610, 15611]</span>
<span class="sd">    :param letters: corresponding to the boards connected, eg. [&#39;A&#39;, &#39;B&#39;, &#39;D&#39;]</span>
<span class="sd">    :param save_folder: folder where the computed data should be stored</span>
<span class="sd">    :param raw_data_folder: folder where the raw experiment data is located</span>
<span class="sd">    :param plot_save_folder: folder where the plots are saved</span>
<span class="sd">    &quot;&quot;&quot;</span>
    <span class="k">def</span> <span class="fm">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">included_runs</span><span class="p">:</span> <span class="n">List</span><span class="p">[</span><span class="nb">int</span><span class="p">]</span><span class="o">=</span><span class="kc">None</span><span class="p">,</span> <span class="n">letters</span><span class="p">:</span> <span class="n">List</span><span class="p">[</span><span class="nb">str</span><span class="p">]</span><span class="o">=</span><span class="kc">None</span><span class="p">,</span> 
                 <span class="n">save_folder</span><span class="p">:</span> <span class="nb">str</span><span class="o">=</span><span class="n">save_folder_global</span><span class="p">,</span> <span class="n">raw_data_folder</span><span class="p">:</span> <span class="nb">str</span><span class="o">=</span><span class="n">raw_data_folder_global</span><span class="p">,</span> 
                 <span class="n">plot_save_folder</span><span class="p">:</span> <span class="nb">str</span><span class="o">=</span><span class="n">plot_save_folder_global</span><span class="p">):</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">save_folder</span> <span class="o">=</span> <span class="n">save_folder</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">raw_data_folder</span> <span class="o">=</span> <span class="n">raw_data_folder</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">plot_save_folder</span> <span class="o">=</span> <span class="n">plot_save_folder</span>

        <span class="bp">self</span><span class="o">.</span><span class="n">numbers</span> <span class="o">=</span> <span class="p">[</span><span class="s1">&#39;1&#39;</span><span class="p">,</span> <span class="s1">&#39;2&#39;</span><span class="p">,</span> <span class="s1">&#39;3&#39;</span><span class="p">,</span> <span class="s1">&#39;4&#39;</span><span class="p">,</span> <span class="s1">&#39;5&#39;</span><span class="p">]</span> <span class="c1"># The five channels on each board</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">included_runs</span> <span class="o">=</span> <span class="n">included_runs</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">included_runs</span><span class="o">.</span><span class="n">sort</span><span class="p">()</span> <span class="c1"># Sorting the run names</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">letters</span> <span class="o">=</span> <span class="n">letters</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">clock_period</span> <span class="o">=</span> <span class="mf">6.238</span>  <span class="c1"># nanoseconds</span>

        <span class="c1"># define channel_names, the access to the &#39;mesh&#39; with the letters and the numbers</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">channel_names</span> <span class="o">=</span> <span class="p">[]</span>
        <span class="k">for</span> <span class="n">letter</span> <span class="ow">in</span> <span class="bp">self</span><span class="o">.</span><span class="n">letters</span><span class="p">:</span>
            <span class="n">channel_names_temp</span> <span class="o">=</span> <span class="p">[</span><span class="n">letter</span> <span class="o">+</span> <span class="n">n</span> <span class="k">for</span> <span class="n">n</span> <span class="ow">in</span> <span class="bp">self</span><span class="o">.</span><span class="n">numbers</span><span class="p">]</span>
            <span class="bp">self</span><span class="o">.</span><span class="n">channel_names</span> <span class="o">+=</span> <span class="n">channel_names_temp</span>
        
        <span class="k">try</span><span class="p">:</span> <span class="c1"># checks the consistency of the boards and runs</span>
            <span class="bp">self</span><span class="o">.</span><span class="n">__check_consistency</span><span class="p">()</span>
        <span class="k">except</span> <span class="ne">AssertionError</span> <span class="k">as</span> <span class="n">e</span><span class="p">:</span>
            <span class="nb">print</span><span class="p">(</span><span class="n">e</span><span class="p">)</span>
        <span class="k">except</span> <span class="ne">TypeError</span> <span class="k">as</span> <span class="n">e</span><span class="p">:</span>
            <span class="nb">print</span><span class="p">(</span><span class="n">e</span><span class="p">)</span>
   

    <span class="c1"># ------------------------------------------------------------------------------------------------------------------------------</span>
    <span class="c1"># GENERAL</span>
    
    <span class="k">def</span> <span class="nf">__check_consistency</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
        <span class="sd">&quot;&quot;&quot;</span>
<span class="sd">        Checks if the boards included in all the included_runs are the same, and checks if these boards are consistent with</span>
<span class="sd">        self.channel_names. Also checks if included_runs is indeed a list</span>
<span class="sd">        &quot;&quot;&quot;</span>
        <span class="c1"># Check if included_runs is a list</span>
        <span class="k">if</span> <span class="nb">type</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">included_runs</span><span class="p">)</span> <span class="o">!=</span> <span class="nb">list</span><span class="p">:</span>
            <span class="k">raise</span> <span class="ne">TypeError</span><span class="p">(</span><span class="s2">&quot;included_runs must be a list&quot;</span><span class="p">)</span>
        
        <span class="c1"># define the channels of the first run as channels_ref</span>
        <span class="n">single_run</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">included_runs</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span>
        <span class="n">folder</span> <span class="o">=</span>  <span class="bp">self</span><span class="o">.</span><span class="n">raw_data_folder</span> <span class="o">+</span> <span class="nb">str</span><span class="p">(</span><span class="nb">int</span><span class="p">(</span><span class="n">single_run</span><span class="p">))</span>
        <span class="n">h</span> <span class="o">=</span> <span class="n">uproot</span><span class="o">.</span><span class="n">concatenate</span><span class="p">({</span><span class="n">folder</span><span class="o">+</span><span class="s1">&#39;/*.root&#39;</span> <span class="p">:</span> <span class="s1">&#39;digi&#39;</span><span class="p">},</span> <span class="n">allow_missing</span> <span class="o">=</span> <span class="kc">True</span><span class="p">)</span>
        <span class="n">columns_ref</span> <span class="o">=</span> <span class="n">ak</span><span class="o">.</span><span class="n">to_pandas</span><span class="p">(</span><span class="n">h</span><span class="p">)</span><span class="o">.</span><span class="n">columns</span>
        <span class="n">channels_ref</span> <span class="o">=</span> <span class="p">[</span><span class="n">channel</span> <span class="k">for</span> <span class="n">channel</span> <span class="ow">in</span> <span class="n">columns_ref</span> <span class="k">if</span> <span class="n">channel</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="ow">in</span> <span class="p">[</span><span class="s1">&#39;A&#39;</span><span class="p">,</span> <span class="s1">&#39;B&#39;</span><span class="p">,</span> <span class="s1">&#39;C&#39;</span><span class="p">,</span> <span class="s1">&#39;D&#39;</span><span class="p">,</span> <span class="s1">&#39;E&#39;</span><span class="p">]</span> <span class="ow">and</span> <span class="n">channel</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span> <span class="ow">in</span> <span class="bp">self</span><span class="o">.</span><span class="n">numbers</span><span class="p">]</span>
        
        <span class="c1"># If inconsistency with self.channel_names, raise error</span>
        <span class="k">if</span> <span class="nb">set</span><span class="p">(</span><span class="n">channels_ref</span><span class="p">)</span> <span class="o">!=</span> <span class="nb">set</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">channel_names</span><span class="p">):</span>
            <span class="k">raise</span> <span class="ne">AssertionError</span><span class="p">(</span><span class="s2">&quot;Letters do not match data&quot;</span><span class="p">)</span>
        
        <span class="c1"># Find the channels all the runs and check consistency with channels_ref</span>
        <span class="k">for</span> <span class="n">single_run</span> <span class="ow">in</span> <span class="bp">self</span><span class="o">.</span><span class="n">included_runs</span><span class="p">:</span>
            
            <span class="n">folder</span> <span class="o">=</span>  <span class="bp">self</span><span class="o">.</span><span class="n">raw_data_folder</span> <span class="o">+</span> <span class="nb">str</span><span class="p">(</span><span class="nb">int</span><span class="p">(</span><span class="n">single_run</span><span class="p">))</span>
            <span class="n">h</span> <span class="o">=</span> <span class="n">uproot</span><span class="o">.</span><span class="n">concatenate</span><span class="p">({</span><span class="n">folder</span><span class="o">+</span><span class="s1">&#39;/*.root&#39;</span> <span class="p">:</span> <span class="s1">&#39;digi&#39;</span><span class="p">},</span> <span class="n">allow_missing</span> <span class="o">=</span> <span class="kc">True</span><span class="p">)</span>

            <span class="n">columns</span> <span class="o">=</span> <span class="n">ak</span><span class="o">.</span><span class="n">to_pandas</span><span class="p">(</span><span class="n">h</span><span class="p">)</span><span class="o">.</span><span class="n">columns</span>
            
            <span class="c1"># If inconsistency, raise error</span>
            <span class="k">if</span> <span class="nb">set</span><span class="p">(</span><span class="n">columns</span><span class="p">)</span> <span class="o">!=</span> <span class="nb">set</span><span class="p">(</span><span class="n">columns_ref</span><span class="p">):</span>
                <span class="k">raise</span> <span class="ne">AssertionError</span><span class="p">(</span><span class="s2">&quot;Included runs are not consistent&quot;</span><span class="p">)</span>
                
                
    <span class="k">def</span> <span class="nf">__plot_hist</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">df</span><span class="p">:</span> <span class="n">pd</span><span class="o">.</span><span class="n">DataFrame</span><span class="o">=</span><span class="kc">None</span><span class="p">,</span> <span class="n">channel</span><span class="p">:</span> <span class="nb">str</span><span class="o">=</span><span class="kc">None</span><span class="p">,</span> <span class="n">bin_centers</span><span class="p">:</span> <span class="n">np</span><span class="o">.</span><span class="n">array</span><span class="o">=</span><span class="kc">None</span><span class="p">,</span> 
                    <span class="n">hist_title</span><span class="p">:</span> <span class="nb">str</span><span class="o">=</span><span class="kc">None</span><span class="p">,</span> <span class="n">xlabel</span><span class="p">:</span> <span class="nb">str</span><span class="o">=</span><span class="kc">None</span><span class="p">,</span> <span class="n">ylabel</span><span class="p">:</span> <span class="nb">str</span><span class="o">=</span><span class="kc">None</span><span class="p">,</span> <span class="n">path</span><span class="p">:</span> <span class="nb">str</span><span class="o">=</span><span class="kc">None</span><span class="p">,</span> <span class="o">*</span><span class="n">coeff</span><span class="p">:</span> <span class="nb">tuple</span><span class="p">):</span>
        <span class="sd">&quot;&quot;&quot;</span>
<span class="sd">        Plots the histohram of the DataFrame df for a single channel and with the bin_centers given. Title and labels are </span>
<span class="sd">        also included in the arguments, as well as the path to save the figure and a tuple with the coefficients for the </span>
<span class="sd">        (multiple) gaussian(s) fit of the data.</span>
<span class="sd">        </span>
<span class="sd">        :param df: DataFrame containing the data to be plotted</span>
<span class="sd">        :param channel: the channel we want to study</span>
<span class="sd">        :param bin_centers: placement of the bars of the histogram</span>
<span class="sd">        :param hist_title: title of the figure</span>
<span class="sd">        :param xlabel: label of the x-axis</span>
<span class="sd">        :param ylabel: label of the y-axis</span>
<span class="sd">        :param path: path to save the figure</span>
<span class="sd">        :param *coeff: pointer to the coefficients computed with the (multiple) gaussian(s) fit</span>
<span class="sd">        &quot;&quot;&quot;</span>
        <span class="n">trace1</span> <span class="o">=</span> <span class="n">px</span><span class="o">.</span><span class="n">histogram</span><span class="p">(</span><span class="n">df</span><span class="p">,</span> <span class="n">x</span><span class="o">=</span><span class="n">channel</span><span class="p">,</span> <span class="n">nbins</span><span class="o">=</span><span class="mi">3000</span><span class="p">)</span>
        <span class="n">fig</span> <span class="o">=</span> <span class="n">make_subplots</span><span class="p">(</span><span class="n">specs</span><span class="o">=</span><span class="p">[[{</span><span class="s2">&quot;secondary_y&quot;</span><span class="p">:</span> <span class="kc">False</span><span class="p">}]])</span>
        <span class="n">fig</span><span class="o">.</span><span class="n">add_trace</span><span class="p">(</span><span class="n">trace1</span><span class="o">.</span><span class="n">data</span><span class="p">[</span><span class="mi">0</span><span class="p">])</span> <span class="c1"># plot the DataFrame</span>
        
        <span class="k">if</span> <span class="nb">len</span><span class="p">(</span><span class="n">coeff</span><span class="p">)</span> <span class="o">==</span> <span class="mi">3</span><span class="p">:</span> <span class="c1"># if we only have a gaussian</span>
            <span class="n">d</span> <span class="o">=</span> <span class="p">{</span><span class="s1">&#39;x&#39;</span><span class="p">:</span> <span class="n">bin_centers</span><span class="p">,</span> <span class="s1">&#39;y&#39;</span><span class="p">:</span> <span class="n">gaussian</span><span class="p">(</span><span class="n">bin_centers</span><span class="p">,</span> <span class="o">*</span><span class="n">coeff</span><span class="p">)}</span>
        <span class="k">else</span><span class="p">:</span> <span class="c1"># if we have more than 3 parameters in coeff, then it means that we work with multiple gaussians</span>
            <span class="n">d</span> <span class="o">=</span> <span class="p">{</span><span class="s1">&#39;x&#39;</span><span class="p">:</span> <span class="n">bin_centers</span><span class="p">,</span> <span class="s1">&#39;y&#39;</span><span class="p">:</span> <span class="n">multiple_gaussians</span><span class="p">(</span><span class="n">bin_centers</span><span class="p">,</span> <span class="o">*</span><span class="n">coeff</span><span class="p">)}</span>
            
        <span class="n">fit_pd</span> <span class="o">=</span> <span class="n">pd</span><span class="o">.</span><span class="n">DataFrame</span><span class="p">(</span><span class="n">data</span><span class="o">=</span><span class="n">d</span><span class="p">)</span>
        <span class="n">trace2</span> <span class="o">=</span> <span class="n">px</span><span class="o">.</span><span class="n">line</span><span class="p">(</span><span class="n">fit_pd</span><span class="p">,</span> <span class="n">x</span><span class="o">=</span><span class="s1">&#39;x&#39;</span><span class="p">,</span> <span class="n">y</span><span class="o">=</span><span class="s1">&#39;y&#39;</span><span class="p">,</span> <span class="n">color_discrete_sequence</span><span class="o">=</span><span class="p">[</span><span class="s1">&#39;red&#39;</span><span class="p">])</span>
        <span class="n">fig</span><span class="o">.</span><span class="n">add_trace</span><span class="p">(</span><span class="n">trace2</span><span class="o">.</span><span class="n">data</span><span class="p">[</span><span class="mi">0</span><span class="p">],</span> <span class="n">secondary_y</span><span class="o">=</span><span class="kc">False</span><span class="p">)</span> <span class="c1"># plot the fit</span>

        <span class="c1"># TODO: uncomment when correct version of plotly</span>
        <span class="c1">#fig.add_vline(x=mean, line_dash=&#39;dash&#39;, line_color=&#39;red&#39;)</span>
        <span class="c1">#fig.add_vrect(x0=mean-sigma, x1=mean+sigma, line_width=0, fillcolor=&#39;red&#39;, opacity=0.2)</span>

        <span class="n">fig</span><span class="o">.</span><span class="n">update_layout</span><span class="p">(</span><span class="n">title</span><span class="o">=</span><span class="n">hist_title</span><span class="p">,</span>
                         <span class="n">xaxis_title</span><span class="o">=</span><span class="n">xlabel</span><span class="p">,</span>
                         <span class="n">yaxis_title</span><span class="o">=</span><span class="n">ylabel</span><span class="p">,</span>
                         <span class="n">width</span><span class="o">=</span><span class="mi">800</span><span class="p">,</span>
                         <span class="n">height</span><span class="o">=</span><span class="mi">600</span><span class="p">)</span>

        <span class="c1"># TODO: uncomment with correct version of plotly</span>
        <span class="c1">#fig.write_image(&#39;test.png&#39;)</span>
        <span class="c1">#fig.write_image(&#39;test.pdf&#39;)</span>
        <span class="c1">#fig.write_html(&#39;test.html&#39;)</span>
        <span class="n">fig</span><span class="o">.</span><span class="n">show</span><span class="p">()</span>

        
    <span class="k">def</span> <span class="nf">__plot_variation</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">df</span><span class="p">:</span> <span class="n">pd</span><span class="o">.</span><span class="n">DataFrame</span><span class="o">=</span><span class="kc">None</span><span class="p">,</span> <span class="n">variation</span><span class="p">:</span> <span class="nb">str</span><span class="o">=</span><span class="kc">None</span><span class="p">,</span>
                         <span class="n">xlabel</span><span class="p">:</span> <span class="nb">str</span><span class="o">=</span><span class="kc">None</span><span class="p">,</span> <span class="n">ylabel</span><span class="p">:</span> <span class="nb">str</span><span class="o">=</span><span class="kc">None</span><span class="p">,</span> <span class="n">plot_title</span><span class="p">:</span> <span class="nb">str</span><span class="o">=</span><span class="kc">None</span><span class="p">):</span>
        <span class="sd">&quot;&quot;&quot;</span>
<span class="sd">        Plots the variation either over runs or spills of the DataFrame. Title and labels of the axes are included </span>
<span class="sd">        as arguments.</span>
<span class="sd">        </span>
<span class="sd">        :param df: DataFrame containing the data to be plotted</span>
<span class="sd">        :param variation: either &#39;run&#39; (histograms are computed over a full run) or &#39;spill&#39; (separately for each spill in single_run).</span>
<span class="sd">        :param xlabel: label of the x-axis</span>
<span class="sd">        :param ylabel: label of the y-axis</span>
<span class="sd">        :param plot_title: title of the figure</span>
<span class="sd">        &quot;&quot;&quot;</span>
        <span class="n">fig</span> <span class="o">=</span> <span class="n">make_subplots</span><span class="p">(</span><span class="n">specs</span><span class="o">=</span><span class="p">[[{</span><span class="s2">&quot;secondary_y&quot;</span><span class="p">:</span> <span class="kc">False</span><span class="p">}]])</span>
        <span class="n">fig</span> <span class="o">=</span> <span class="n">px</span><span class="o">.</span><span class="n">line</span><span class="p">(</span><span class="n">data_frame</span><span class="o">=</span><span class="n">df</span><span class="p">,</span> <span class="n">x</span><span class="o">=</span><span class="n">variation</span><span class="p">,</span> <span class="n">y</span><span class="o">=</span><span class="s1">&#39;mean&#39;</span><span class="p">,</span> <span class="n">error_y</span><span class="o">=</span><span class="s2">&quot;sigma&quot;</span><span class="p">,</span> <span class="n">color</span><span class="o">=</span><span class="s1">&#39;channel&#39;</span><span class="p">)</span>
        
        <span class="n">fig</span><span class="o">.</span><span class="n">update_layout</span><span class="p">(</span><span class="n">title</span><span class="o">=</span><span class="n">plot_title</span><span class="p">,</span>
                         <span class="n">xaxis_title</span><span class="o">=</span><span class="n">xlabel</span><span class="p">,</span>
                         <span class="n">yaxis_title</span><span class="o">=</span><span class="n">ylabel</span><span class="p">)</span>

        <span class="k">if</span> <span class="n">variation</span> <span class="o">==</span> <span class="s1">&#39;spill&#39;</span><span class="p">:</span>
            <span class="n">fig</span><span class="o">.</span><span class="n">update_layout</span><span class="p">(</span><span class="n">xaxis</span><span class="o">=</span> <span class="nb">dict</span><span class="p">(</span><span class="n">tickmode</span><span class="o">=</span><span class="s1">&#39;linear&#39;</span><span class="p">,</span> <span class="n">tick0</span><span class="o">=</span><span class="mi">1</span><span class="p">,</span> <span class="n">dtick</span><span class="o">=</span><span class="mi">1</span><span class="p">))</span>
        <span class="k">else</span><span class="p">:</span>
            <span class="n">fig</span><span class="o">.</span><span class="n">update_layout</span><span class="p">(</span><span class="n">xaxis</span><span class="o">=</span> <span class="nb">dict</span><span class="p">(</span><span class="n">tickmode</span><span class="o">=</span><span class="s1">&#39;array&#39;</span><span class="p">,</span> <span class="n">tickvals</span><span class="o">=</span><span class="n">np</span><span class="o">.</span><span class="n">arange</span><span class="p">(</span><span class="nb">len</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">included_runs</span><span class="p">)),</span> 
                                          <span class="n">ticktext</span><span class="o">=</span><span class="p">[</span><span class="nb">str</span><span class="p">(</span><span class="n">run</span><span class="p">)</span> <span class="k">for</span> <span class="n">run</span> <span class="ow">in</span> <span class="bp">self</span><span class="o">.</span><span class="n">included_runs</span><span class="p">]))</span>
                        
        <span class="n">fig</span><span class="o">.</span><span class="n">show</span><span class="p">()</span>
        
        
    <span class="k">def</span> <span class="nf">__plot_colormesh</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">mean</span><span class="p">:</span> <span class="n">np</span><span class="o">.</span><span class="n">array</span><span class="o">=</span><span class="kc">None</span><span class="p">,</span> <span class="n">plot_title</span><span class="p">:</span> <span class="nb">str</span><span class="o">=</span><span class="kc">None</span><span class="p">):</span>
        <span class="sd">&quot;&quot;&quot;</span>
<span class="sd">        Plots a 2D colormesh map of the mean of a given quantity (amplitude, amplitude difference, time difference) over all channels</span>
<span class="sd">        and boards.</span>
<span class="sd">        </span>
<span class="sd">        :param mean: array containing all the data</span>
<span class="sd">        :param plot_title: title of the figure</span>
<span class="sd">        &quot;&quot;&quot;</span>
        <span class="n">mean_df</span> <span class="o">=</span> <span class="n">pd</span><span class="o">.</span><span class="n">DataFrame</span><span class="p">(</span><span class="n">mean</span><span class="p">)</span>
        <span class="n">mean_df</span><span class="o">.</span><span class="n">columns</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">letters</span>
        <span class="n">mean_df</span><span class="o">.</span><span class="n">index</span> <span class="o">=</span> <span class="nb">reversed</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">numbers</span><span class="p">)</span>
        
        <span class="n">fig</span> <span class="o">=</span> <span class="n">px</span><span class="o">.</span><span class="n">imshow</span><span class="p">(</span><span class="n">mean_df</span><span class="p">)</span>
        <span class="n">fig</span><span class="o">.</span><span class="n">update_layout</span><span class="p">(</span><span class="n">title</span><span class="o">=</span><span class="n">plot_title</span><span class="p">)</span>
        
        <span class="c1"># TODO: save figure</span>
        <span class="n">fig</span><span class="o">.</span><span class="n">show</span><span class="p">()</span></div>
        
</pre></div>

            <div class="clearer"></div>
          </div>
      </div>
      <div class="clearer"></div>
    </div>
  </body>
</html>