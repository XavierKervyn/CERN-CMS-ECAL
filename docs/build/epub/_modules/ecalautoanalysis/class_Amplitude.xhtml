<!DOCTYPE html>

<html xmlns="http://www.w3.org/1999/xhtml" xmlns:epub="http://www.idpf.org/2007/ops">
  <head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>ecalautoanalysis.class_Amplitude</title>
    <link rel="stylesheet" href="../../_static/pygments.css" type="text/css" />
    <link rel="stylesheet" href="../../_static/epub.css" type="text/css" /> 
  </head><body>

    <div class="document">
      <div class="documentwrapper">
          <div class="body" role="main">
            
  <h1>Source code for ecalautoanalysis.class_Amplitude</h1><div class="highlight"><pre>
<span></span><span class="sd">&quot;&quot;&quot; Imports &quot;&quot;&quot;</span>

<span class="kn">from</span> <span class="nn">.class_ECAL</span> <span class="kn">import</span> <span class="o">*</span>

<span class="sd">&quot;&quot;&quot;</span>
<span class="sd">General function definitions</span>
<span class="sd">&quot;&quot;&quot;</span>

<span class="k">def</span> <span class="nf">sigma_amp_fit</span><span class="p">(</span><span class="n">A</span><span class="p">:</span> <span class="nb">float</span><span class="o">=</span><span class="kc">None</span><span class="p">,</span> <span class="o">*</span><span class="n">p</span><span class="p">:</span> <span class="nb">tuple</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="nb">float</span><span class="p">:</span>
    <span class="sd">&quot;&quot;&quot;</span>
<span class="sd">    Fit function for the relative amplitude resolution</span>
<span class="sd">    </span>
<span class="sd">    :param A: amplitude</span>
<span class="sd">    :param p: parameters N (noise), s (stochastic), and c (offset)</span>
<span class="sd">    </span>
<span class="sd">    :return: Value of the function at A with parameters N, s, and c</span>
<span class="sd">    &quot;&quot;&quot;</span>
    <span class="n">N</span><span class="p">,</span> <span class="n">s</span><span class="p">,</span> <span class="n">c</span> <span class="o">=</span> <span class="n">p</span>
    <span class="k">return</span> <span class="n">np</span><span class="o">.</span><span class="n">sqrt</span><span class="p">(</span> <span class="p">(</span><span class="n">N</span><span class="o">/</span><span class="n">A</span><span class="p">)</span><span class="o">**</span><span class="mi">2</span> <span class="o">+</span> <span class="p">(</span><span class="n">s</span><span class="o">**</span><span class="mi">2</span><span class="o">/</span><span class="n">A</span><span class="p">)</span> <span class="o">+</span> <span class="n">c</span><span class="o">**</span><span class="mi">2</span> <span class="p">)</span>

<span class="sd">&quot;&quot;&quot;</span>
<span class="sd">Child class definition</span>
<span class="sd">&quot;&quot;&quot;</span>

<div class="viewcode-block" id="Amplitude"><a class="viewcode-back" href="../../index.xhtml#ecalautoanalysis.Amplitude">[docs]</a><span class="k">class</span> <span class="nc">Amplitude</span><span class="p">(</span><span class="n">ECAL</span><span class="p">):</span>
    <span class="sd">&quot;&quot;&quot;</span>
<span class="sd">    This class is for the analysis of the amplitudes. </span>
<span class="sd">    </span>
<span class="sd">    With a given list of self.included_runs, one can plot amplitude histograms, variation of the amplitude over runs, colormeshes over the channels, as well as the relative amplitude resolution using the public methods.</span>
<span class="sd">    </span>
<span class="sd">    :param included_runs: list of all the numbers (int) corresponding to the runs to be analyzed, eg. [15610, 15611]</span>
<span class="sd">    :param letters: list of all the boards (str) connected for the included_runs, eg. [&#39;A&#39;, &#39;B&#39;, &#39;D&#39;]</span>
<span class="sd">    :param save_folder: local path to the folder where files will be saved</span>
<span class="sd">    :param raw_data_folder: local path to the folder where the data from DQM is sent</span>
<span class="sd">    :param plot_save_folder: local path to the folder where the plots can be saved</span>
<span class="sd">    &quot;&quot;&quot;</span>
    <span class="k">def</span> <span class="fm">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">included_runs</span><span class="p">:</span> <span class="n">List</span><span class="p">[</span><span class="nb">int</span><span class="p">]</span><span class="o">=</span><span class="kc">None</span><span class="p">,</span> <span class="n">letters</span><span class="p">:</span> <span class="n">List</span><span class="p">[</span><span class="nb">str</span><span class="p">]</span><span class="o">=</span><span class="kc">None</span><span class="p">,</span>
                 <span class="n">save_folder</span><span class="p">:</span> <span class="nb">str</span><span class="o">=</span><span class="n">save_folder_global</span><span class="p">,</span> <span class="n">raw_data_folder</span><span class="p">:</span> <span class="nb">str</span><span class="o">=</span><span class="n">raw_data_folder_global</span><span class="p">,</span>
                 <span class="n">plot_save_folder</span><span class="p">:</span> <span class="nb">str</span><span class="o">=</span><span class="n">plot_save_folder_global</span><span class="p">):</span>
        <span class="nb">super</span><span class="p">()</span><span class="o">.</span><span class="fm">__init__</span><span class="p">(</span><span class="n">included_runs</span><span class="p">,</span> <span class="n">letters</span><span class="p">,</span> <span class="n">save_folder</span><span class="p">,</span> <span class="n">raw_data_folder</span><span class="p">,</span> <span class="n">plot_save_folder</span><span class="p">)</span>
        
    <span class="c1"># ------------------------------------------------------------------------------------------------------------------------------</span>
    <span class="c1"># GENERAL</span>
    
    <span class="k">def</span> <span class="nf">__generate_stats</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">single_run</span><span class="p">:</span> <span class="nb">int</span><span class="o">=</span><span class="kc">None</span><span class="p">,</span> <span class="n">board</span><span class="p">:</span> <span class="nb">str</span><span class="o">=</span><span class="kc">None</span><span class="p">,</span> <span class="n">variation</span><span class="p">:</span> <span class="nb">str</span><span class="o">=</span><span class="s1">&#39;run&#39;</span><span class="p">,</span> <span class="n">plot</span><span class="p">:</span> <span class="nb">bool</span><span class="o">=</span><span class="kc">False</span><span class="p">,</span> <span class="n">spill_index</span><span class="p">:</span> <span class="nb">int</span><span class="o">=</span><span class="kc">None</span><span class="p">):</span>
        <span class="sd">&quot;&quot;&quot;</span>
<span class="sd">        Generates the statistics for a given board in a run, either when analyzing spills or runs. Can also plot the histogram of the data.</span>
<span class="sd">        Statistics of the amplitude Gaussian fit (mean, mean error, sigma, sigma error) are then saved in .csv files for later use.</span>
<span class="sd">        </span>
<span class="sd">        :param single_run: number associated with the run to be analyzed, eg. 15610</span>
<span class="sd">        :param board: board to be analyzed with the run, eg. &#39;C&#39;</span>
<span class="sd">        :param variation: (&#39;run&#39; or &#39;spill&#39;) computing the statistics per run or spill</span>
<span class="sd">        :param plot: boolean. If True, the histogram of the data is plotted.</span>
<span class="sd">        &quot;&quot;&quot;</span>
        <span class="n">folder</span> <span class="o">=</span>  <span class="bp">self</span><span class="o">.</span><span class="n">raw_data_folder</span> <span class="o">+</span> <span class="nb">str</span><span class="p">(</span><span class="nb">int</span><span class="p">(</span><span class="n">single_run</span><span class="p">))</span>

        <span class="c1"># Computation with merged data: retrieve the amplitude</span>
        <span class="n">folder</span> <span class="o">=</span>  <span class="bp">self</span><span class="o">.</span><span class="n">raw_data_folder</span> <span class="o">+</span> <span class="nb">str</span><span class="p">(</span><span class="nb">int</span><span class="p">(</span><span class="n">single_run</span><span class="p">))</span>
        <span class="k">if</span> <span class="n">variation</span><span class="o">==</span><span class="s1">&#39;spill&#39;</span> <span class="ow">and</span> <span class="n">plot</span><span class="o">==</span><span class="kc">True</span><span class="p">:</span>
            <span class="n">h2</span> <span class="o">=</span> <span class="n">uproot</span><span class="o">.</span><span class="n">concatenate</span><span class="p">({</span><span class="n">folder</span> <span class="o">+</span> <span class="sa">f</span><span class="s1">&#39;/</span><span class="si">{</span><span class="n">spill_index</span><span class="si">}</span><span class="s1">.root&#39;</span> <span class="p">:</span> <span class="s1">&#39;digi&#39;</span><span class="p">},</span> <span class="n">allow_missing</span> <span class="o">=</span> <span class="kc">True</span><span class="p">)</span>
        <span class="k">else</span><span class="p">:</span>
            <span class="n">h2</span> <span class="o">=</span> <span class="n">uproot</span><span class="o">.</span><span class="n">concatenate</span><span class="p">({</span><span class="n">folder</span> <span class="o">+</span> <span class="s1">&#39;/*.root&#39;</span> <span class="p">:</span> <span class="s1">&#39;digi&#39;</span><span class="p">},</span> <span class="n">allow_missing</span> <span class="o">=</span> <span class="kc">True</span><span class="p">)</span>
        
        <span class="n">run_name</span> <span class="o">=</span> <span class="n">os</span><span class="o">.</span><span class="n">path</span><span class="o">.</span><span class="n">basename</span><span class="p">(</span><span class="n">os</span><span class="o">.</span><span class="n">path</span><span class="o">.</span><span class="n">normpath</span><span class="p">(</span><span class="n">folder</span><span class="p">))</span> <span class="c1"># creating folder to save csv file</span>
        <span class="c1"># TODO: delete print or add verbose boolean parameter?</span>
        <span class="nb">print</span><span class="p">(</span><span class="s1">&#39;Run: &#39;</span><span class="p">,</span> <span class="n">run_name</span><span class="p">)</span>
        <span class="n">run_save</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">save_folder</span> <span class="o">+</span> <span class="s1">&#39;/Run &#39;</span> <span class="o">+</span> <span class="n">run_name</span> <span class="o">+</span> <span class="s1">&#39;/&#39;</span>
        <span class="n">Path</span><span class="p">(</span><span class="n">run_save</span><span class="p">)</span><span class="o">.</span><span class="n">mkdir</span><span class="p">(</span><span class="n">parents</span><span class="o">=</span><span class="kc">True</span><span class="p">,</span> <span class="n">exist_ok</span><span class="o">=</span><span class="kc">True</span><span class="p">)</span> <span class="c1"># folder created</span>
        
        <span class="c1"># retrieve only the channels for the given board</span>
        <span class="n">slicing</span> <span class="o">=</span> <span class="p">[</span><span class="n">channel</span> <span class="k">for</span> <span class="n">channel</span> <span class="ow">in</span> <span class="bp">self</span><span class="o">.</span><span class="n">channel_names</span> <span class="k">if</span> <span class="n">channel</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">==</span> <span class="n">board</span><span class="p">]</span>
        <span class="n">amp</span> <span class="o">=</span> <span class="n">h2</span><span class="p">[</span><span class="s1">&#39;amp_max&#39;</span><span class="p">]</span> <span class="c1"># retrieve the amplitude in the .root file</span>
        <span class="n">amp_pd</span> <span class="o">=</span> <span class="n">pd</span><span class="o">.</span><span class="n">DataFrame</span><span class="p">(</span><span class="n">amp</span><span class="p">,</span> <span class="n">columns</span><span class="o">=</span><span class="bp">self</span><span class="o">.</span><span class="n">channel_names</span><span class="p">)[</span><span class="n">slicing</span><span class="p">]</span>
        
        <span class="c1"># column header</span>
        <span class="n">col_list</span> <span class="o">=</span> <span class="nb">len</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">numbers</span><span class="p">)</span><span class="o">*</span><span class="p">[</span><span class="n">board</span><span class="p">];</span> <span class="n">col_list</span> <span class="o">=</span> <span class="p">[</span><span class="n">x</span> <span class="o">+</span> <span class="n">y</span> <span class="k">for</span> <span class="n">x</span><span class="p">,</span><span class="n">y</span> <span class="ow">in</span> <span class="nb">zip</span><span class="p">(</span><span class="n">col_list</span><span class="p">,</span> <span class="bp">self</span><span class="o">.</span><span class="n">numbers</span><span class="p">)]</span> 
        
        <span class="k">if</span> <span class="n">variation</span><span class="o">==</span><span class="s1">&#39;spill&#39;</span><span class="p">:</span> <span class="c1"># if we want to compute the statistics per spill</span>
            <span class="c1"># retrieve the spill number in the .root file</span>
            <span class="k">if</span> <span class="n">plot</span><span class="o">==</span><span class="kc">True</span><span class="p">:</span>
                <span class="n">h1</span> <span class="o">=</span> <span class="n">uproot</span><span class="o">.</span><span class="n">concatenate</span><span class="p">({</span><span class="n">folder</span> <span class="o">+</span> <span class="sa">f</span><span class="s1">&#39;/</span><span class="si">{</span><span class="n">spill_index</span><span class="si">}</span><span class="s1">.root&#39;</span> <span class="p">:</span> <span class="s1">&#39;h4&#39;</span><span class="p">},</span> <span class="n">allow_missing</span> <span class="o">=</span> <span class="kc">True</span><span class="p">)</span>
            <span class="k">else</span><span class="p">:</span>
                <span class="n">h1</span> <span class="o">=</span> <span class="n">uproot</span><span class="o">.</span><span class="n">concatenate</span><span class="p">({</span><span class="n">folder</span> <span class="o">+</span> <span class="s1">&#39;/*.root&#39;</span> <span class="p">:</span> <span class="s1">&#39;h4&#39;</span><span class="p">},</span> <span class="n">allow_missing</span> <span class="o">=</span> <span class="kc">True</span><span class="p">)</span>
            <span class="n">spill</span> <span class="o">=</span> <span class="n">h1</span><span class="p">[</span><span class="s1">&#39;spill&#39;</span><span class="p">]</span> 
            <span class="n">spill_pd</span> <span class="o">=</span> <span class="n">pd</span><span class="o">.</span><span class="n">DataFrame</span><span class="p">(</span><span class="n">spill</span><span class="p">,</span> <span class="n">columns</span><span class="o">=</span><span class="p">[</span><span class="s2">&quot;spill_nb&quot;</span><span class="p">])</span> 
            
            <span class="c1"># merge the two DataFrames</span>
            <span class="n">aspill_pd</span> <span class="o">=</span> <span class="n">pd</span><span class="o">.</span><span class="n">concat</span><span class="p">([</span><span class="n">amp_pd</span><span class="p">,</span> <span class="n">spill_pd</span><span class="p">],</span> <span class="n">axis</span><span class="o">=</span><span class="mi">1</span><span class="p">,</span> <span class="n">join</span><span class="o">=</span><span class="s1">&#39;inner&#39;</span><span class="p">)</span>

            <span class="c1"># create empty matrices to store the statistics</span>
            <span class="n">spill_set</span> <span class="o">=</span> <span class="nb">set</span><span class="p">(</span><span class="n">aspill_pd</span><span class="p">[</span><span class="s2">&quot;spill_nb&quot;</span><span class="p">])</span> <span class="c1"># to get a set of unique spill numbers</span>
            <span class="n">amp_mean_spill</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">zeros</span><span class="p">((</span><span class="nb">len</span><span class="p">(</span><span class="n">spill_set</span><span class="p">),</span> <span class="nb">len</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">numbers</span><span class="p">)))</span>
            <span class="n">amp_mean_err_spill</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">zeros</span><span class="p">((</span><span class="nb">len</span><span class="p">(</span><span class="n">spill_set</span><span class="p">),</span> <span class="nb">len</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">numbers</span><span class="p">)))</span>
            <span class="n">amp_sigma_spill</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">zeros</span><span class="p">((</span><span class="nb">len</span><span class="p">(</span><span class="n">spill_set</span><span class="p">),</span> <span class="nb">len</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">numbers</span><span class="p">)))</span>
            <span class="n">amp_sigma_err_spill</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">zeros</span><span class="p">((</span><span class="nb">len</span><span class="p">(</span><span class="n">spill_set</span><span class="p">),</span> <span class="nb">len</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">numbers</span><span class="p">)))</span>

            <span class="k">for</span> <span class="n">j</span><span class="p">,</span> <span class="n">spill</span> <span class="ow">in</span> <span class="nb">enumerate</span><span class="p">(</span><span class="n">spill_set</span><span class="p">):</span>
                <span class="n">aspill_pd_temp</span> <span class="o">=</span> <span class="n">aspill_pd</span><span class="p">[</span><span class="n">aspill_pd</span><span class="o">.</span><span class="n">spill_nb</span> <span class="o">==</span> <span class="n">spill</span><span class="p">]</span>

                <span class="c1"># &#39;empty&#39; arrays to store the statistics of each channel</span>
                <span class="n">mu_arr</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">zeros</span><span class="p">(</span><span class="nb">len</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">numbers</span><span class="p">))</span>
                <span class="n">mu_error_arr</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">zeros</span><span class="p">(</span><span class="nb">len</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">numbers</span><span class="p">))</span>
                <span class="n">sigma_arr</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">zeros</span><span class="p">(</span><span class="nb">len</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">numbers</span><span class="p">))</span>
                <span class="n">sigma_error_arr</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">zeros</span><span class="p">(</span><span class="nb">len</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">numbers</span><span class="p">))</span>

                <span class="k">for</span> <span class="n">i</span><span class="p">,</span> <span class="n">channel</span> <span class="ow">in</span> <span class="nb">enumerate</span><span class="p">(</span><span class="n">slicing</span><span class="p">):</span>         
                    <span class="n">hist</span><span class="p">,</span> <span class="n">bin_edges</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">histogram</span><span class="p">(</span><span class="n">aspill_pd_temp</span><span class="p">[</span><span class="n">channel</span><span class="p">],</span> <span class="n">bins</span> <span class="o">=</span> <span class="mi">1500</span><span class="p">)</span>

                    <span class="n">bin_centers</span> <span class="o">=</span> <span class="p">((</span><span class="n">bin_edges</span><span class="p">[:</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span> <span class="o">+</span> <span class="n">bin_edges</span><span class="p">[</span><span class="mi">1</span><span class="p">:])</span> <span class="o">/</span> <span class="mi">2</span><span class="p">)</span>  

                    <span class="c1"># fitting process: give a good guess to ECAL.__gaussian(*p)</span>
                    <span class="n">mean_guess</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">average</span><span class="p">(</span><span class="n">bin_centers</span><span class="p">,</span> <span class="n">weights</span><span class="o">=</span><span class="n">hist</span><span class="p">)</span>
                    <span class="n">sigma_guess</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">sqrt</span><span class="p">(</span><span class="n">np</span><span class="o">.</span><span class="n">average</span><span class="p">((</span><span class="n">bin_centers</span> <span class="o">-</span> <span class="n">mean_guess</span><span class="p">)</span><span class="o">**</span><span class="mi">2</span><span class="p">,</span> <span class="n">weights</span><span class="o">=</span><span class="n">hist</span><span class="p">))</span>
                    <span class="n">guess</span> <span class="o">=</span> <span class="p">[</span><span class="n">np</span><span class="o">.</span><span class="n">max</span><span class="p">(</span><span class="n">hist</span><span class="p">),</span> <span class="n">mean_guess</span><span class="p">,</span> <span class="n">sigma_guess</span><span class="p">]</span>
                    
                    <span class="c1"># fit the histogram with a gaussian, get the statistics</span>
                    <span class="n">coeff</span><span class="p">,</span> <span class="n">covar</span> <span class="o">=</span> <span class="n">curve_fit</span><span class="p">(</span><span class="n">gaussian</span><span class="p">,</span> <span class="n">bin_centers</span><span class="p">,</span> <span class="n">hist</span><span class="p">,</span> <span class="n">p0</span><span class="o">=</span><span class="n">guess</span><span class="p">,</span> <span class="n">maxfev</span><span class="o">=</span><span class="mi">5000</span><span class="p">)</span>
                    <span class="n">mu</span> <span class="o">=</span> <span class="n">coeff</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span>
                    <span class="n">mu_error</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">sqrt</span><span class="p">(</span><span class="n">covar</span><span class="p">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">1</span><span class="p">])</span>
                    <span class="n">sigma</span> <span class="o">=</span> <span class="n">coeff</span><span class="p">[</span><span class="mi">2</span><span class="p">]</span>
                    <span class="n">sigma_error</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">sqrt</span><span class="p">(</span><span class="n">covar</span><span class="p">[</span><span class="mi">2</span><span class="p">,</span><span class="mi">2</span><span class="p">])</span>
                    
                    <span class="c1">#store the statistics</span>
                    <span class="n">mu_arr</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">=</span> <span class="n">mu</span>
                    <span class="n">mu_error_arr</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">=</span> <span class="n">mu_error</span>
                    <span class="n">sigma_arr</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">=</span> <span class="n">sigma</span>
                    <span class="n">sigma_error_arr</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">=</span> <span class="n">sigma_error</span>
                    
                    <span class="k">if</span> <span class="n">plot</span><span class="p">:</span> <span class="c1"># TODO: add path name to save the plots</span>
                        <span class="n">title</span> <span class="o">=</span> <span class="sa">f</span><span class="s1">&#39;Run: </span><span class="si">{</span><span class="n">run_name</span><span class="si">}</span><span class="s1">, Channel: </span><span class="si">{</span><span class="n">board</span><span class="o">+</span><span class="bp">self</span><span class="o">.</span><span class="n">numbers</span><span class="p">[</span><span class="n">i</span><span class="p">]</span><span class="si">}</span><span class="s1">, Spill </span><span class="si">{</span><span class="n">spill</span><span class="si">}</span><span class="s1">&#39;</span>
                        <span class="n">xlabel</span> <span class="o">=</span> <span class="s1">&#39;Amplitude (ADC counts)&#39;</span>
                        <span class="n">ylabel</span> <span class="o">=</span> <span class="s1">&#39;Occurence (a.u.)&#39;</span>
                        <span class="n">path</span> <span class="o">=</span> <span class="s1">&#39;&#39;</span>
                        <span class="nb">super</span><span class="p">()</span><span class="o">.</span><span class="n">_ECAL__plot_hist</span><span class="p">(</span><span class="n">amp_pd</span><span class="p">,</span> <span class="n">channel</span><span class="p">,</span> <span class="n">bin_centers</span><span class="p">,</span> <span class="n">title</span><span class="p">,</span> <span class="n">xlabel</span><span class="p">,</span> <span class="n">ylabel</span><span class="p">,</span> <span class="n">path</span><span class="p">,</span> <span class="o">*</span><span class="n">coeff</span><span class="p">)</span>
                
                <span class="c1"># gather all the statistics for each spill</span>
                <span class="n">amp_mean_spill</span><span class="p">[</span><span class="n">j</span><span class="p">,:]</span> <span class="o">=</span> <span class="n">mu_arr</span>
                <span class="n">amp_mean_err_spill</span><span class="p">[</span><span class="n">j</span><span class="p">,:]</span> <span class="o">=</span> <span class="n">mu_error_arr</span>
                <span class="n">amp_sigma_spill</span><span class="p">[</span><span class="n">j</span><span class="p">,:]</span> <span class="o">=</span> <span class="n">sigma_arr</span>
                <span class="n">amp_sigma_err_spill</span><span class="p">[</span><span class="n">j</span><span class="p">,:]</span> <span class="o">=</span> <span class="n">sigma_error_arr</span>
                
            <span class="c1"># convert the matrices to DataFrames</span>
            <span class="n">spill_amp_mean_df</span> <span class="o">=</span> <span class="n">pd</span><span class="o">.</span><span class="n">DataFrame</span><span class="p">(</span><span class="n">amp_mean_spill</span><span class="p">,</span> <span class="n">columns</span><span class="o">=</span><span class="n">col_list</span><span class="p">)</span>
            <span class="n">spill_amp_mean_err_df</span> <span class="o">=</span> <span class="n">pd</span><span class="o">.</span><span class="n">DataFrame</span><span class="p">(</span><span class="n">amp_mean_err_spill</span><span class="p">,</span> <span class="n">columns</span><span class="o">=</span><span class="n">col_list</span><span class="p">)</span>
            <span class="n">spill_amp_sigma_df</span> <span class="o">=</span> <span class="n">pd</span><span class="o">.</span><span class="n">DataFrame</span><span class="p">(</span><span class="n">amp_sigma_spill</span><span class="p">,</span> <span class="n">columns</span><span class="o">=</span><span class="n">col_list</span><span class="p">)</span>
            <span class="n">spill_amp_sigma_err_df</span> <span class="o">=</span> <span class="n">pd</span><span class="o">.</span><span class="n">DataFrame</span><span class="p">(</span><span class="n">amp_sigma_err_spill</span><span class="p">,</span> <span class="n">columns</span><span class="o">=</span><span class="n">col_list</span><span class="p">)</span>
        
            <span class="c1"># save these in .csv files: 4 files created per tuple (run, board)</span>
            <span class="n">spill_amp_mean_df</span><span class="o">.</span><span class="n">to_csv</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">save_folder</span> <span class="o">+</span> <span class="sa">f</span><span class="s1">&#39;/Run </span><span class="si">{</span><span class="n">single_run</span><span class="si">}</span><span class="s1">&#39;</span> 
                                     <span class="o">+</span> <span class="sa">f</span><span class="s1">&#39;/Spill mean amplitude run </span><span class="si">{</span><span class="n">single_run</span><span class="si">}</span><span class="s1"> board </span><span class="si">{</span><span class="n">board</span><span class="si">}</span><span class="s1">.csv&#39;</span><span class="p">)</span>
            <span class="n">spill_amp_mean_err_df</span><span class="o">.</span><span class="n">to_csv</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">save_folder</span> <span class="o">+</span> <span class="sa">f</span><span class="s1">&#39;/Run </span><span class="si">{</span><span class="n">single_run</span><span class="si">}</span><span class="s1">&#39;</span> 
                                         <span class="o">+</span> <span class="sa">f</span><span class="s1">&#39;/Spill error mean amplitude run </span><span class="si">{</span><span class="n">single_run</span><span class="si">}</span><span class="s1"> board </span><span class="si">{</span><span class="n">board</span><span class="si">}</span><span class="s1">.csv&#39;</span><span class="p">)</span>
            <span class="n">spill_amp_sigma_df</span><span class="o">.</span><span class="n">to_csv</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">save_folder</span> <span class="o">+</span> <span class="sa">f</span><span class="s1">&#39;/Run </span><span class="si">{</span><span class="n">single_run</span><span class="si">}</span><span class="s1">&#39;</span> 
                                      <span class="o">+</span> <span class="sa">f</span><span class="s1">&#39;/Spill sigma amplitude run </span><span class="si">{</span><span class="n">single_run</span><span class="si">}</span><span class="s1"> board </span><span class="si">{</span><span class="n">board</span><span class="si">}</span><span class="s1">.csv&#39;</span><span class="p">)</span>
            <span class="n">spill_amp_sigma_err_df</span><span class="o">.</span><span class="n">to_csv</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">save_folder</span> <span class="o">+</span> <span class="sa">f</span><span class="s1">&#39;/Run </span><span class="si">{</span><span class="n">single_run</span><span class="si">}</span><span class="s1">&#39;</span> 
                                          <span class="o">+</span> <span class="sa">f</span><span class="s1">&#39;/Spill error sigma amplitude run </span><span class="si">{</span><span class="n">single_run</span><span class="si">}</span><span class="s1"> board </span><span class="si">{</span><span class="n">board</span><span class="si">}</span><span class="s1">.csv&#39;</span><span class="p">)</span>
        
        <span class="k">else</span><span class="p">:</span> <span class="c1"># if variation==&#39;run&#39;</span>
            <span class="c1"># empty arrays to store the statistics of each channel</span>
            <span class="n">mu_arr</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">zeros</span><span class="p">(</span><span class="nb">len</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">numbers</span><span class="p">))</span>
            <span class="n">mu_error_arr</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">zeros</span><span class="p">(</span><span class="nb">len</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">numbers</span><span class="p">))</span>
            <span class="n">sigma_arr</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">zeros</span><span class="p">(</span><span class="nb">len</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">numbers</span><span class="p">))</span>
            <span class="n">sigma_error_arr</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">zeros</span><span class="p">(</span><span class="nb">len</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">numbers</span><span class="p">))</span>

            <span class="k">for</span> <span class="n">i</span><span class="p">,</span> <span class="n">channel</span> <span class="ow">in</span> <span class="nb">enumerate</span><span class="p">(</span><span class="n">slicing</span><span class="p">):</span>
                <span class="n">hist</span><span class="p">,</span> <span class="n">bin_edges</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">histogram</span><span class="p">(</span><span class="n">amp_pd</span><span class="p">[</span><span class="n">channel</span><span class="p">],</span> <span class="n">bins</span> <span class="o">=</span> <span class="mi">1500</span><span class="p">)</span>
                <span class="c1">#hist, bin_edges, _ = plt.hist(amp_pd[channel], bins = 1500)</span>

                <span class="n">bin_centers</span> <span class="o">=</span> <span class="p">((</span><span class="n">bin_edges</span><span class="p">[:</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span> <span class="o">+</span> <span class="n">bin_edges</span><span class="p">[</span><span class="mi">1</span><span class="p">:])</span> <span class="o">/</span> <span class="mi">2</span><span class="p">)</span>  

                <span class="c1"># fitting process: give a good guess</span>
                <span class="n">mean_guess</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">average</span><span class="p">(</span><span class="n">bin_centers</span><span class="p">,</span> <span class="n">weights</span><span class="o">=</span><span class="n">hist</span><span class="p">)</span> <span class="c1"># alternatively: mean_guess = bin_centers[np.argmax(hist)]</span>
                <span class="n">sigma_guess</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">sqrt</span><span class="p">(</span><span class="n">np</span><span class="o">.</span><span class="n">average</span><span class="p">((</span><span class="n">bin_centers</span> <span class="o">-</span> <span class="n">mean_guess</span><span class="p">)</span><span class="o">**</span><span class="mi">2</span><span class="p">,</span> <span class="n">weights</span><span class="o">=</span><span class="n">hist</span><span class="p">))</span>
                <span class="n">guess</span> <span class="o">=</span> <span class="p">[</span><span class="n">np</span><span class="o">.</span><span class="n">max</span><span class="p">(</span><span class="n">hist</span><span class="p">),</span> <span class="n">mean_guess</span><span class="p">,</span> <span class="n">sigma_guess</span><span class="p">]</span>
                
                <span class="c1"># fit the histogram with a gaussian</span>
                <span class="n">coeff</span><span class="p">,</span> <span class="n">covar</span> <span class="o">=</span> <span class="n">curve_fit</span><span class="p">(</span><span class="n">gaussian</span><span class="p">,</span> <span class="n">bin_centers</span><span class="p">,</span> <span class="n">hist</span><span class="p">,</span> <span class="n">p0</span><span class="o">=</span><span class="n">guess</span><span class="p">,</span> <span class="n">maxfev</span><span class="o">=</span><span class="mi">5000</span><span class="p">)</span>
                
                <span class="c1"># get the statistics from the fit, store them in the arrays</span>
                <span class="n">mu</span> <span class="o">=</span> <span class="n">coeff</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span>
                <span class="n">mu_error</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">sqrt</span><span class="p">(</span><span class="n">covar</span><span class="p">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">1</span><span class="p">])</span>
                <span class="n">sigma</span> <span class="o">=</span> <span class="n">coeff</span><span class="p">[</span><span class="mi">2</span><span class="p">]</span>
                <span class="n">sigma_error</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">sqrt</span><span class="p">(</span><span class="n">covar</span><span class="p">[</span><span class="mi">2</span><span class="p">,</span><span class="mi">2</span><span class="p">])</span>
                <span class="n">mu_arr</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">=</span> <span class="n">mu</span>
                <span class="n">mu_error_arr</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">=</span> <span class="n">mu_error</span>
                <span class="n">sigma_arr</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">=</span> <span class="n">sigma</span>
                <span class="n">sigma_error_arr</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">=</span> <span class="n">sigma_error</span>
                
                <span class="k">if</span> <span class="n">plot</span><span class="p">:</span>
                    <span class="n">title</span> <span class="o">=</span> <span class="sa">f</span><span class="s1">&#39;Run: </span><span class="si">{</span><span class="n">run_name</span><span class="si">}</span><span class="s1">, Channel: </span><span class="si">{</span><span class="n">board</span><span class="o">+</span><span class="bp">self</span><span class="o">.</span><span class="n">numbers</span><span class="p">[</span><span class="n">i</span><span class="p">]</span><span class="si">}</span><span class="s1">&#39;</span>
                    <span class="n">xlabel</span> <span class="o">=</span> <span class="s1">&#39;Amplitude (ADC counts)&#39;</span>
                    <span class="n">ylabel</span> <span class="o">=</span> <span class="s1">&#39;Occurence (a.u.)&#39;</span>
                    
                    <span class="n">plot_save</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">plot_save_folder</span> <span class="o">+</span> <span class="sa">f</span><span class="s1">&#39;/Run </span><span class="si">{</span><span class="n">single_run</span><span class="si">}</span><span class="s1">&#39;</span>
                    <span class="n">Path</span><span class="p">(</span><span class="n">plot_save</span><span class="p">)</span><span class="o">.</span><span class="n">mkdir</span><span class="p">(</span><span class="n">parents</span><span class="o">=</span><span class="kc">True</span><span class="p">,</span> <span class="n">exist_ok</span><span class="o">=</span><span class="kc">True</span><span class="p">)</span> <span class="c1"># folder created</span>
                    
                    <span class="n">path</span> <span class="o">=</span> <span class="n">plot_save</span> <span class="o">+</span> <span class="sa">f</span><span class="s1">&#39;/Run amplitude run </span><span class="si">{</span><span class="n">single_run</span><span class="si">}</span><span class="s1"> board </span><span class="si">{</span><span class="n">board</span><span class="si">}</span><span class="s1">&#39;</span>
                    
                    <span class="nb">super</span><span class="p">()</span><span class="o">.</span><span class="n">_ECAL__plot_hist</span><span class="p">(</span><span class="n">amp_pd</span><span class="p">,</span> <span class="n">channel</span><span class="p">,</span> <span class="n">bin_centers</span><span class="p">,</span> <span class="n">title</span><span class="p">,</span> <span class="n">xlabel</span><span class="p">,</span> <span class="n">ylabel</span><span class="p">,</span> <span class="n">path</span><span class="p">,</span> <span class="o">*</span><span class="n">coeff</span><span class="p">)</span>

            <span class="c1"># convert the arrays into a single Dataframe</span>
            <span class="n">run_amp_df</span> <span class="o">=</span> <span class="n">pd</span><span class="o">.</span><span class="n">DataFrame</span><span class="p">({</span><span class="s1">&#39;mu&#39;</span><span class="p">:</span><span class="n">mu_arr</span><span class="p">,</span> <span class="s1">&#39;mu error&#39;</span><span class="p">:</span><span class="n">mu_error_arr</span><span class="p">,</span> <span class="s1">&#39;sigma&#39;</span><span class="p">:</span> <span class="n">sigma_arr</span><span class="p">,</span> <span class="s1">&#39;sigma error&#39;</span><span class="p">:</span> <span class="n">sigma_error_arr</span><span class="p">})</span>

            <span class="c1"># save it in a single .csv file per tuple (run, board)</span>
            <span class="n">run_amp_df</span><span class="o">.</span><span class="n">to_csv</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">save_folder</span> <span class="o">+</span> <span class="sa">f</span><span class="s1">&#39;/Run </span><span class="si">{</span><span class="n">single_run</span><span class="si">}</span><span class="s1">&#39;</span> 
                              <span class="o">+</span> <span class="sa">f</span><span class="s1">&#39;/Run amplitude run </span><span class="si">{</span><span class="n">single_run</span><span class="si">}</span><span class="s1"> board </span><span class="si">{</span><span class="n">board</span><span class="si">}</span><span class="s1">.csv&#39;</span><span class="p">)</span>
    
    
    <span class="k">def</span> <span class="nf">__load_stats</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">single_run</span><span class="p">:</span> <span class="nb">int</span><span class="o">=</span><span class="kc">None</span><span class="p">,</span> <span class="n">board</span><span class="p">:</span> <span class="nb">str</span><span class="o">=</span><span class="kc">None</span><span class="p">,</span> <span class="n">variation</span><span class="p">:</span> <span class="nb">bool</span><span class="o">=</span><span class="kc">None</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">Union</span><span class="p">[</span><span class="nb">tuple</span><span class="p">,</span> <span class="n">pd</span><span class="o">.</span><span class="n">DataFrame</span><span class="p">]:</span>
        <span class="sd">&quot;&quot;&quot;</span>
<span class="sd">        Loads the file containing the statistics for a single couple (run, board). If the file does not exist, calls __generate_stats()</span>
<span class="sd">        Returns the .csv file(s) of __generate_file()</span>
<span class="sd">        </span>
<span class="sd">        :param single_run: number associated with the run to be analyzed, eg. 15610</span>
<span class="sd">        :param board: board to be analyzed with the run, eg. &#39;C&#39;</span>
<span class="sd">        :param variation: (&#39;run&#39; or &#39;spill&#39;). if __generate is called, we compute the statistics per run or spill</span>
<span class="sd">        </span>
<span class="sd">        :return: pd.DataFrame (one if variation=&#39;run&#39;, four if variation=&#39;spill&#39;) with the statistics</span>
<span class="sd">        &quot;&quot;&quot;</span>
        <span class="k">try</span><span class="p">:</span> <span class="c1"># check if the file exists</span>
            
            <span class="k">if</span> <span class="n">variation</span><span class="o">==</span><span class="s1">&#39;spill&#39;</span><span class="p">:</span>
                <span class="k">return</span> <span class="p">(</span><span class="n">pd</span><span class="o">.</span><span class="n">read_csv</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">save_folder</span> <span class="o">+</span> <span class="sa">f</span><span class="s1">&#39;/Run </span><span class="si">{</span><span class="n">single_run</span><span class="si">}</span><span class="s1">&#39;</span> 
                                    <span class="o">+</span> <span class="sa">f</span><span class="s1">&#39;/Spill mean amplitude run </span><span class="si">{</span><span class="n">single_run</span><span class="si">}</span><span class="s1"> board </span><span class="si">{</span><span class="n">board</span><span class="si">}</span><span class="s1">.csv&#39;</span><span class="p">),</span>
                    <span class="n">pd</span><span class="o">.</span><span class="n">read_csv</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">save_folder</span> <span class="o">+</span> <span class="sa">f</span><span class="s1">&#39;/Run </span><span class="si">{</span><span class="n">single_run</span><span class="si">}</span><span class="s1">&#39;</span>
                                <span class="o">+</span> <span class="sa">f</span><span class="s1">&#39;/Spill error mean amplitude run </span><span class="si">{</span><span class="n">single_run</span><span class="si">}</span><span class="s1"> board </span><span class="si">{</span><span class="n">board</span><span class="si">}</span><span class="s1">.csv&#39;</span><span class="p">),</span>
                    <span class="n">pd</span><span class="o">.</span><span class="n">read_csv</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">save_folder</span> <span class="o">+</span> <span class="sa">f</span><span class="s1">&#39;/Run </span><span class="si">{</span><span class="n">single_run</span><span class="si">}</span><span class="s1">&#39;</span>
                                <span class="o">+</span> <span class="sa">f</span><span class="s1">&#39;/Spill sigma amplitude run </span><span class="si">{</span><span class="n">single_run</span><span class="si">}</span><span class="s1"> board </span><span class="si">{</span><span class="n">board</span><span class="si">}</span><span class="s1">.csv&#39;</span><span class="p">),</span>
                    <span class="n">pd</span><span class="o">.</span><span class="n">read_csv</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">save_folder</span> <span class="o">+</span> <span class="sa">f</span><span class="s1">&#39;/Run </span><span class="si">{</span><span class="n">single_run</span><span class="si">}</span><span class="s1">&#39;</span>
                                <span class="o">+</span> <span class="sa">f</span><span class="s1">&#39;/Spill error sigma amplitude run </span><span class="si">{</span><span class="n">single_run</span><span class="si">}</span><span class="s1"> board </span><span class="si">{</span><span class="n">board</span><span class="si">}</span><span class="s1">.csv&#39;</span><span class="p">))</span>
            <span class="k">else</span><span class="p">:</span> <span class="c1"># if variation==&#39;run&#39;:</span>
                <span class="k">return</span> <span class="n">pd</span><span class="o">.</span><span class="n">read_csv</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">save_folder</span> <span class="o">+</span> <span class="sa">f</span><span class="s1">&#39;/Run </span><span class="si">{</span><span class="n">single_run</span><span class="si">}</span><span class="s1">&#39;</span>
                                   <span class="o">+</span> <span class="sa">f</span><span class="s1">&#39;/Run amplitude run </span><span class="si">{</span><span class="n">single_run</span><span class="si">}</span><span class="s1"> board </span><span class="si">{</span><span class="n">board</span><span class="si">}</span><span class="s1">.csv&#39;</span><span class="p">)</span>
                
        <span class="k">except</span> <span class="ne">FileNotFoundError</span><span class="p">:</span>
            <span class="nb">print</span><span class="p">(</span><span class="s1">&#39;File not found, generating .csv&#39;</span><span class="p">)</span>
            <span class="bp">self</span><span class="o">.</span><span class="n">__generate_stats</span><span class="p">(</span><span class="n">single_run</span><span class="p">,</span> <span class="n">board</span><span class="p">,</span> <span class="n">variation</span><span class="p">)</span> <span class="c1"># generating the statistics file</span>
            
            <span class="c1"># loading the file and returning it</span>
            <span class="k">if</span> <span class="n">variation</span><span class="o">==</span><span class="s1">&#39;spill&#39;</span><span class="p">:</span>
                <span class="k">return</span> <span class="p">(</span><span class="n">pd</span><span class="o">.</span><span class="n">read_csv</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">save_folder</span> <span class="o">+</span> <span class="sa">f</span><span class="s1">&#39;/Run </span><span class="si">{</span><span class="n">single_run</span><span class="si">}</span><span class="s1">&#39;</span>
                                    <span class="o">+</span> <span class="sa">f</span><span class="s1">&#39;/Spill mean amplitude run </span><span class="si">{</span><span class="n">single_run</span><span class="si">}</span><span class="s1"> board </span><span class="si">{</span><span class="n">board</span><span class="si">}</span><span class="s1">.csv&#39;</span><span class="p">),</span>
                    <span class="n">pd</span><span class="o">.</span><span class="n">read_csv</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">save_folder</span> <span class="o">+</span> <span class="sa">f</span><span class="s1">&#39;/Run </span><span class="si">{</span><span class="n">single_run</span><span class="si">}</span><span class="s1">&#39;</span>
                                <span class="o">+</span> <span class="sa">f</span><span class="s1">&#39;/Spill error mean amplitude run </span><span class="si">{</span><span class="n">single_run</span><span class="si">}</span><span class="s1"> board </span><span class="si">{</span><span class="n">board</span><span class="si">}</span><span class="s1">.csv&#39;</span><span class="p">),</span>
                    <span class="n">pd</span><span class="o">.</span><span class="n">read_csv</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">save_folder</span> <span class="o">+</span> <span class="sa">f</span><span class="s1">&#39;/Run </span><span class="si">{</span><span class="n">single_run</span><span class="si">}</span><span class="s1">&#39;</span>
                                <span class="o">+</span> <span class="sa">f</span><span class="s1">&#39;/Spill sigma amplitude run </span><span class="si">{</span><span class="n">single_run</span><span class="si">}</span><span class="s1"> board </span><span class="si">{</span><span class="n">board</span><span class="si">}</span><span class="s1">.csv&#39;</span><span class="p">),</span>
                    <span class="n">pd</span><span class="o">.</span><span class="n">read_csv</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">save_folder</span> <span class="o">+</span> <span class="sa">f</span><span class="s1">&#39;/Run </span><span class="si">{</span><span class="n">single_run</span><span class="si">}</span><span class="s1">&#39;</span>
                                <span class="o">+</span> <span class="sa">f</span><span class="s1">&#39;/Spill error sigma amplitude run </span><span class="si">{</span><span class="n">single_run</span><span class="si">}</span><span class="s1"> board </span><span class="si">{</span><span class="n">board</span><span class="si">}</span><span class="s1">.csv&#39;</span><span class="p">))</span>
            <span class="k">else</span><span class="p">:</span> <span class="c1"># if variation==&#39;run&#39;:</span>
                <span class="k">return</span> <span class="n">pd</span><span class="o">.</span><span class="n">read_csv</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">save_folder</span> <span class="o">+</span> <span class="sa">f</span><span class="s1">&#39;/Run </span><span class="si">{</span><span class="n">single_run</span><span class="si">}</span><span class="s1">&#39;</span>
                                   <span class="o">+</span> <span class="sa">f</span><span class="s1">&#39;/Run amplitude run </span><span class="si">{</span><span class="n">single_run</span><span class="si">}</span><span class="s1"> board </span><span class="si">{</span><span class="n">board</span><span class="si">}</span><span class="s1">.csv&#39;</span><span class="p">)</span>
            
        <span class="k">except</span><span class="p">:</span> 
            <span class="k">raise</span> <span class="ne">Exception</span><span class="p">(</span><span class="s1">&#39;Could not load nor generate .csv file&#39;</span><span class="p">)</span>
       
<div class="viewcode-block" id="Amplitude.get_mean"><a class="viewcode-back" href="../../index.xhtml#ecalautoanalysis.Amplitude.get_mean">[docs]</a>    <span class="k">def</span> <span class="nf">get_mean</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">single_run</span><span class="p">:</span> <span class="nb">int</span><span class="o">=</span><span class="kc">None</span><span class="p">,</span> <span class="n">board</span><span class="p">:</span> <span class="nb">str</span><span class="o">=</span><span class="kc">None</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">pd</span><span class="o">.</span><span class="n">core</span><span class="o">.</span><span class="n">series</span><span class="o">.</span><span class="n">Series</span><span class="p">:</span>
        <span class="sd">&quot;&quot;&quot;</span>
<span class="sd">        Getter method for the mean of the amplitude Gaussian fit for the channels in the board in the single_run. Returns a container with the mean amplitude for each of the channels in the board.</span>
<span class="sd">        </span>
<span class="sd">        :param single_run: number associated with the run to be analyzed, eg. 15610</span>
<span class="sd">        :param board: board to be analyzed with the run, eg. &#39;C&#39;</span>
<span class="sd">        </span>
<span class="sd">        :return: pandas.core.series.Series containing the mean of the amplitude for each of the channels in the board</span>
<span class="sd">        &quot;&quot;&quot;</span>
        <span class="n">df</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">__load_stats</span><span class="p">(</span><span class="n">single_run</span><span class="p">,</span> <span class="n">board</span><span class="p">,</span> <span class="n">variation</span><span class="o">=</span><span class="s1">&#39;run&#39;</span><span class="p">)</span>
        <span class="k">return</span> <span class="n">df</span><span class="p">[</span><span class="s2">&quot;mu&quot;</span><span class="p">]</span></div>
    
    
<div class="viewcode-block" id="Amplitude.get_sigma"><a class="viewcode-back" href="../../index.xhtml#ecalautoanalysis.Amplitude.get_sigma">[docs]</a>    <span class="k">def</span> <span class="nf">get_sigma</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">single_run</span><span class="p">:</span> <span class="nb">int</span><span class="o">=</span><span class="kc">None</span><span class="p">,</span> <span class="n">board</span><span class="p">:</span> <span class="nb">str</span><span class="o">=</span><span class="kc">None</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">pd</span><span class="o">.</span><span class="n">core</span><span class="o">.</span><span class="n">series</span><span class="o">.</span><span class="n">Series</span><span class="p">:</span>
        <span class="sd">&quot;&quot;&quot;</span>
<span class="sd">        Getter method for the standard deviation of the amplitude Gaussian fit for the channels in the board in the single_run. Returns a container with the standard deviation amplitude for each of the channels in the board.</span>
<span class="sd">        </span>
<span class="sd">        :param single_run: number associated with the run to be analyzed, eg. 15610</span>
<span class="sd">        :param board: board to be analyzed with the run, eg. &#39;C&#39;</span>
<span class="sd">        </span>
<span class="sd">        :return: pandas.core.series.Series containing the standard deviation of the amplitude for each of the channels in the board</span>
<span class="sd">        &quot;&quot;&quot;</span>
        <span class="n">df</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">__load_stats</span><span class="p">(</span><span class="n">single_run</span><span class="p">,</span> <span class="n">board</span><span class="p">,</span> <span class="n">variation</span><span class="o">=</span><span class="s1">&#39;run&#39;</span><span class="p">)</span>
        <span class="k">return</span> <span class="n">df</span><span class="p">[</span><span class="s2">&quot;sigma&quot;</span><span class="p">]</span></div>
    
    
<div class="viewcode-block" id="Amplitude.get_mean_err"><a class="viewcode-back" href="../../index.xhtml#ecalautoanalysis.Amplitude.get_mean_err">[docs]</a>    <span class="k">def</span> <span class="nf">get_mean_err</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">single_run</span><span class="p">:</span> <span class="nb">int</span><span class="o">=</span><span class="kc">None</span><span class="p">,</span> <span class="n">board</span><span class="p">:</span> <span class="nb">str</span><span class="o">=</span><span class="kc">None</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">pd</span><span class="o">.</span><span class="n">core</span><span class="o">.</span><span class="n">series</span><span class="o">.</span><span class="n">Series</span><span class="p">:</span>
        <span class="sd">&quot;&quot;&quot;</span>
<span class="sd">        Getter method for the error on the mean of the amplitude Gaussian fit for the channels in the board in the single_run. Returns a container with the error on the mean amplitude for each of the channels in the board.</span>
<span class="sd">        </span>
<span class="sd">        :param single_run: number associated with the run to be analyzed, eg. 15610</span>
<span class="sd">        :param board: board to be analyzed with the run, eg. &#39;C&#39;</span>
<span class="sd">        </span>
<span class="sd">        :return: pandas.core.series.Series containing the error on the mean of the amplitude for each of the channels in the board</span>
<span class="sd">        &quot;&quot;&quot;</span>
        <span class="n">df</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">__load_stats</span><span class="p">(</span><span class="n">single_run</span><span class="p">,</span> <span class="n">board</span><span class="p">,</span> <span class="n">variation</span><span class="o">=</span><span class="s1">&#39;run&#39;</span><span class="p">)</span>
        <span class="k">return</span> <span class="n">df</span><span class="p">[</span><span class="s2">&quot;mu error&quot;</span><span class="p">]</span></div>
    
    
<div class="viewcode-block" id="Amplitude.get_sigma_err"><a class="viewcode-back" href="../../index.xhtml#ecalautoanalysis.Amplitude.get_sigma_err">[docs]</a>    <span class="k">def</span> <span class="nf">get_sigma_err</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">single_run</span><span class="p">:</span> <span class="nb">int</span><span class="o">=</span><span class="kc">None</span><span class="p">,</span> <span class="n">board</span><span class="p">:</span> <span class="nb">str</span><span class="o">=</span><span class="kc">None</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">pd</span><span class="o">.</span><span class="n">core</span><span class="o">.</span><span class="n">series</span><span class="o">.</span><span class="n">Series</span><span class="p">:</span>
        <span class="sd">&quot;&quot;&quot;</span>
<span class="sd">        Getter method for the error on the standard deviation of the amplitude Gaussian fit for the channels in the board in the single_run. Returns a container with the error on the standard deviation amplitude for each of the channels in the board.</span>
<span class="sd">        </span>
<span class="sd">        :param single_run: number associated with the run to be analyzed, eg. 15610</span>
<span class="sd">        :param board: board to be analyzed with the run, eg. &#39;C&#39;</span>
<span class="sd">        </span>
<span class="sd">        :return: pandas.core.series.Series containing the error on the standard deviation of the amplitude for each of the channels in the board</span>
<span class="sd">        &quot;&quot;&quot;</span>
        <span class="n">df</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">__load_stats</span><span class="p">(</span><span class="n">single_run</span><span class="p">,</span> <span class="n">board</span><span class="p">,</span> <span class="n">variation</span><span class="o">=</span><span class="s1">&#39;run&#39;</span><span class="p">)</span>
        <span class="k">return</span> <span class="n">df</span><span class="p">[</span><span class="s2">&quot;sigma error&quot;</span><span class="p">]</span></div>
        
            
    <span class="c1"># ------------------------------------------------------------------------------------------------------------------------------</span>
    <span class="c1"># SPILLS</span>
    
    <span class="k">def</span> <span class="nf">__spill_single_board</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">single_run</span><span class="p">:</span> <span class="nb">int</span><span class="o">=</span><span class="kc">None</span><span class="p">,</span> <span class="n">board</span><span class="p">:</span> <span class="nb">str</span><span class="o">=</span><span class="kc">None</span><span class="p">):</span> 
        <span class="sd">&quot;&quot;&quot;</span>
<span class="sd">        Plots the mean amplitude as a function of spill number for a single board of a given single_run.</span>
<span class="sd">        </span>
<span class="sd">        :param single_run: number associated with the run to be analyzed, eg. 15610</span>
<span class="sd">        :param board: board to be analyzed with the run, eg. &#39;C&#39;</span>
<span class="sd">        &quot;&quot;&quot;</span>
        
        <span class="c1"># load the DataFrames with the statistics computed per spill</span>
        <span class="n">mean</span><span class="p">,</span> <span class="n">mean_err</span><span class="p">,</span> <span class="n">sigma</span><span class="p">,</span> <span class="n">sigma_err</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">__load_stats</span><span class="p">(</span><span class="n">single_run</span><span class="p">,</span> <span class="n">board</span><span class="p">,</span> <span class="s1">&#39;spill&#39;</span><span class="p">)</span>
        <span class="n">num_spills</span> <span class="o">=</span> <span class="n">mean</span><span class="o">.</span><span class="n">shape</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="c1"># number of spills in the single run</span>
        
        <span class="c1"># keep only the channels for the board. Ex, if &#39;A&#39;, the [&#39;A1&#39;, &#39;A2&#39;, etc.]</span>
        <span class="n">slicing</span> <span class="o">=</span> <span class="p">[</span><span class="n">channel</span> <span class="k">for</span> <span class="n">channel</span> <span class="ow">in</span> <span class="bp">self</span><span class="o">.</span><span class="n">channel_names</span> <span class="k">if</span> <span class="n">channel</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">==</span> <span class="n">board</span><span class="p">]</span>
        
        <span class="c1"># Spill column in pd.DataFrame for plot</span>
        <span class="n">spill_column_tmp</span> <span class="o">=</span> <span class="p">[</span><span class="nb">len</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">numbers</span><span class="p">)</span><span class="o">*</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="n">num_spills</span><span class="o">+</span><span class="mi">1</span><span class="p">)]</span>
        <span class="n">spill_column</span> <span class="o">=</span> <span class="p">[]</span>
        <span class="k">for</span> <span class="n">lst</span> <span class="ow">in</span> <span class="n">spill_column_tmp</span><span class="p">:</span>
            <span class="n">spill_column</span> <span class="o">+=</span> <span class="n">lst</span>
        
        <span class="c1"># Channel column in plot pd.DataFrame</span>
        <span class="n">channel_column</span> <span class="o">=</span> <span class="n">num_spills</span><span class="o">*</span><span class="n">slicing</span>
        
        <span class="c1"># Mean and sigma columns in plot pd.DataFrame</span>
        <span class="n">mean_arr</span> <span class="o">=</span> <span class="n">mean</span><span class="p">[</span><span class="n">slicing</span><span class="p">]</span><span class="o">.</span><span class="n">to_numpy</span><span class="p">()</span>
        <span class="n">mean_stacked</span> <span class="o">=</span> <span class="n">mean_arr</span><span class="o">.</span><span class="n">flatten</span><span class="p">()</span>
        <span class="n">sigma_arr</span> <span class="o">=</span> <span class="n">sigma</span><span class="p">[</span><span class="n">slicing</span><span class="p">]</span><span class="o">.</span><span class="n">to_numpy</span><span class="p">()</span>
        <span class="n">sigma_stacked</span> <span class="o">=</span> <span class="n">sigma_arr</span><span class="o">.</span><span class="n">flatten</span><span class="p">()</span>
        
        <span class="n">plot_df</span> <span class="o">=</span> <span class="n">pd</span><span class="o">.</span><span class="n">DataFrame</span><span class="p">({</span><span class="s2">&quot;spill&quot;</span><span class="p">:</span> <span class="n">spill_column</span><span class="p">,</span> <span class="s2">&quot;channel&quot;</span><span class="p">:</span> <span class="n">channel_column</span><span class="p">,</span> <span class="s2">&quot;mean&quot;</span><span class="p">:</span> <span class="n">mean_stacked</span><span class="p">,</span> <span class="s2">&quot;sigma&quot;</span><span class="p">:</span> <span class="n">sigma_stacked</span><span class="p">})</span>
      
        <span class="n">xlabel</span> <span class="o">=</span> <span class="s1">&#39;Spill&#39;</span>
        <span class="n">ylabel</span> <span class="o">=</span> <span class="s1">&#39;Amplitude (ADC counts)&#39;</span>
        <span class="n">plot_title</span> <span class="o">=</span> <span class="sa">f</span><span class="s1">&#39;Run </span><span class="si">{</span><span class="n">single_run</span><span class="si">}</span><span class="s1">, board </span><span class="si">{</span><span class="n">board</span><span class="si">}</span><span class="s1">, mean amplitude over spills&#39;</span>
        
        <span class="nb">super</span><span class="p">()</span><span class="o">.</span><span class="n">_ECAL__plot_variation</span><span class="p">(</span><span class="n">plot_df</span><span class="p">,</span> <span class="s1">&#39;spill&#39;</span><span class="p">,</span> <span class="n">xlabel</span><span class="p">,</span> <span class="n">ylabel</span><span class="p">,</span> <span class="n">plot_title</span><span class="p">)</span>

    
    
    <span class="k">def</span> <span class="nf">__spill_single_run</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">single_run</span><span class="p">:</span> <span class="nb">int</span><span class="o">=</span><span class="kc">None</span><span class="p">):</span>
        <span class="sd">&quot;&quot;&quot;</span>
<span class="sd">        Plots the amplitude per spill for a single_run (loops on its boards)</span>
<span class="sd">        </span>
<span class="sd">        :param single_run: number associated with the run to be analyzed, eg. 15610</span>
<span class="sd">        &quot;&quot;&quot;</span>
        <span class="k">for</span> <span class="n">board</span> <span class="ow">in</span> <span class="bp">self</span><span class="o">.</span><span class="n">letters</span><span class="p">:</span>
            <span class="bp">self</span><span class="o">.</span><span class="n">__spill_single_board</span><span class="p">(</span><span class="n">single_run</span><span class="p">,</span> <span class="n">board</span><span class="p">)</span>
    
    
<div class="viewcode-block" id="Amplitude.spill_variation"><a class="viewcode-back" href="../../index.xhtml#ecalautoanalysis.Amplitude.spill_variation">[docs]</a>    <span class="k">def</span> <span class="nf">spill_variation</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
        <span class="sd">&quot;&quot;&quot;</span>
<span class="sd">        Plots the amplitude per spill for all the runs in self.included_runs (loops on all the single_runs)</span>
<span class="sd">        &quot;&quot;&quot;</span>
        <span class="k">for</span> <span class="n">single_run</span> <span class="ow">in</span> <span class="bp">self</span><span class="o">.</span><span class="n">included_runs</span><span class="p">:</span>
            <span class="bp">self</span><span class="o">.</span><span class="n">__spill_single_run</span><span class="p">(</span><span class="n">single_run</span><span class="p">)</span></div>

            
    <span class="c1"># ------------------------------------------------------------------------------------------------------------------------------</span>
    <span class="c1"># RUNS</span>
    
    <span class="c1"># ---- HISTOGRAMS ----</span>
    
    <span class="k">def</span> <span class="nf">__hist_single_board</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">single_run</span><span class="p">:</span> <span class="nb">int</span><span class="o">=</span><span class="kc">None</span><span class="p">,</span> <span class="n">board</span><span class="p">:</span> <span class="nb">str</span><span class="o">=</span><span class="kc">None</span><span class="p">,</span> <span class="n">variation</span><span class="p">:</span> <span class="nb">str</span><span class="o">=</span><span class="kc">None</span><span class="p">,</span> <span class="n">spill_i</span><span class="p">:</span> <span class="nb">int</span><span class="o">=</span><span class="kc">None</span><span class="p">):</span>
        <span class="sd">&quot;&quot;&quot;</span>
<span class="sd">        Generates the statistics for all the channels on a given board and plots the corresponding histograms.</span>
<span class="sd">        If variation is &quot;run&quot;, then the histograms contain all the events in the single_run. If variation is &quot;spill&quot;, the histogram contains the events in the spill_i of the single_run.</span>
<span class="sd">        </span>
<span class="sd">        :param single_run: number associated with the run to be analyzed, eg. 15610</span>
<span class="sd">        :param board: board to be analyzed with the run, eg. &#39;C&#39;</span>
<span class="sd">        :param variation: either &quot;run&quot; or &quot;spill&quot;. If variation is &quot;run&quot;, then the histograms contain all the events in the single_run. If variation is &quot;spill&quot;, the histogram contains the events in the spill_i of the single_run.</span>
<span class="sd">        :param spill_i: index of the spill to be considered in the case variation=&quot;spill&quot;</span>
<span class="sd">        &quot;&quot;&quot;</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">__generate_stats</span><span class="p">(</span><span class="n">single_run</span><span class="p">,</span> <span class="n">board</span><span class="p">,</span> <span class="n">variation</span><span class="p">,</span> <span class="n">plot</span><span class="o">=</span><span class="kc">True</span><span class="p">,</span> <span class="n">spill_index</span><span class="o">=</span><span class="n">spill_i</span><span class="p">)</span>
        

    <span class="k">def</span> <span class="nf">__hist_single_run</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">single_run</span><span class="p">:</span> <span class="nb">int</span><span class="o">=</span><span class="kc">None</span><span class="p">,</span> <span class="n">variation</span><span class="p">:</span> <span class="nb">str</span><span class="o">=</span><span class="kc">None</span><span class="p">,</span> <span class="n">spill_i</span><span class="p">:</span> <span class="nb">int</span><span class="o">=</span><span class="kc">None</span><span class="p">):</span>
        <span class="sd">&quot;&quot;&quot;</span>
<span class="sd">        Generates the statistics for all the channels in a given run (loops on all its boards) and plots the corresponding histograms.</span>
<span class="sd">        </span>
<span class="sd">        :param single_run: number associated with the run to be analyzed, eg. 15610</span>
<span class="sd">        :param variation: either &quot;run&quot; or &quot;spill&quot;. If variation is &quot;run&quot;, then the histograms contain all the events in the single_run. If variation is &quot;spill&quot;, the histogram contains the events in the spill_i of the single_run.</span>
<span class="sd">        :param spill_i: index of the spill to be considered in the case variation=&quot;spill&quot;</span>
<span class="sd">        &quot;&quot;&quot;</span>
        <span class="k">for</span> <span class="n">board</span> <span class="ow">in</span> <span class="bp">self</span><span class="o">.</span><span class="n">letters</span><span class="p">:</span>
            <span class="bp">self</span><span class="o">.</span><span class="n">__hist_single_board</span><span class="p">(</span><span class="n">single_run</span><span class="p">,</span> <span class="n">board</span><span class="p">,</span> <span class="n">variation</span><span class="p">,</span> <span class="n">spill_i</span><span class="p">)</span>
        

<div class="viewcode-block" id="Amplitude.hist"><a class="viewcode-back" href="../../index.xhtml#ecalautoanalysis.Amplitude.hist">[docs]</a>    <span class="k">def</span> <span class="nf">hist</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">variation</span><span class="p">:</span> <span class="nb">str</span><span class="o">=</span><span class="s1">&#39;run&#39;</span><span class="p">,</span> <span class="n">spill_i</span><span class="p">:</span> <span class="nb">int</span><span class="o">=</span><span class="kc">None</span><span class="p">):</span>
        <span class="sd">&quot;&quot;&quot;</span>
<span class="sd">        Computes the statistics and plots the corresponding histograms for every single_run in self.included_runs and channels in self.channel_names.</span>
<span class="sd">        </span>
<span class="sd">        :param variation: either &quot;run&quot; or &quot;spill&quot;. If variation is &quot;run&quot;, then the histograms contain all the events in the run considered. If variation is &quot;spill&quot;, the histogram contains the events in the spill_i of the run considered.</span>
<span class="sd">        :param spill_i: index of the spill to be considered in the case variation=&quot;spill&quot;</span>
<span class="sd">        &quot;&quot;&quot;</span>
        <span class="c1"># TODO: exceptio if bad spill_i</span>
        <span class="k">for</span> <span class="n">single_run</span> <span class="ow">in</span> <span class="bp">self</span><span class="o">.</span><span class="n">included_runs</span><span class="p">:</span>
            <span class="bp">self</span><span class="o">.</span><span class="n">__hist_single_run</span><span class="p">(</span><span class="n">single_run</span><span class="p">,</span> <span class="n">variation</span><span class="p">,</span> <span class="n">spill_i</span><span class="p">)</span></div>
    
    
    <span class="c1"># ---- VARIATION OVER RUNS ----</span>
    
    <span class="k">def</span> <span class="nf">__run_single_board</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">board</span><span class="p">:</span> <span class="nb">str</span><span class="o">=</span><span class="kc">None</span><span class="p">):</span>
        <span class="sd">&quot;&quot;&quot;</span>
<span class="sd">        Plots the mean amplitude over each single_run of self.included_runs for every channel in a given board</span>
<span class="sd">        </span>
<span class="sd">        :param board: board to be analyzed with the run, eg. &#39;C&#39;</span>
<span class="sd">        &quot;&quot;&quot;</span>
        <span class="c1"># empty matrices to store the statistics     </span>
        <span class="n">mean</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">zeros</span><span class="p">((</span><span class="nb">len</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">included_runs</span><span class="p">),</span> <span class="nb">len</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">numbers</span><span class="p">)))</span>
        <span class="n">sigma</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">zeros</span><span class="p">((</span><span class="nb">len</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">included_runs</span><span class="p">),</span> <span class="nb">len</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">numbers</span><span class="p">)))</span>
        <span class="c1"># load the DataFrames and fill the matrices</span>
        <span class="k">for</span> <span class="n">i</span><span class="p">,</span> <span class="n">single_run</span> <span class="ow">in</span> <span class="nb">enumerate</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">included_runs</span><span class="p">):</span>
            <span class="n">run_amp_df</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">__load_stats</span><span class="p">(</span><span class="n">single_run</span><span class="p">,</span> <span class="n">board</span><span class="p">,</span> <span class="s1">&#39;run&#39;</span><span class="p">)</span> <span class="c1"># 4 columns, n_numbers rows</span>
            <span class="n">mean</span><span class="p">[</span><span class="n">i</span><span class="p">,:]</span> <span class="o">=</span> <span class="n">run_amp_df</span><span class="p">[</span><span class="s2">&quot;mu&quot;</span><span class="p">]</span>
            <span class="n">sigma</span><span class="p">[</span><span class="n">i</span><span class="p">,:]</span> <span class="o">=</span> <span class="n">run_amp_df</span><span class="p">[</span><span class="s2">&quot;sigma&quot;</span><span class="p">]</span> 
        
        <span class="c1"># keep only the channels of the board we are interested in</span>
        <span class="n">slicing</span> <span class="o">=</span> <span class="p">[</span><span class="n">channel</span> <span class="k">for</span> <span class="n">channel</span> <span class="ow">in</span> <span class="bp">self</span><span class="o">.</span><span class="n">channel_names</span> <span class="k">if</span> <span class="n">channel</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">==</span> <span class="n">board</span><span class="p">]</span>
        
        <span class="c1"># Run column in pd.DataFrame for plot</span>
        <span class="n">run_column_tmp</span> <span class="o">=</span> <span class="p">[</span><span class="nb">len</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">numbers</span><span class="p">)</span><span class="o">*</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="n">np</span><span class="o">.</span><span class="n">arange</span><span class="p">(</span><span class="nb">len</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">included_runs</span><span class="p">))]</span>
        <span class="n">run_column</span> <span class="o">=</span> <span class="p">[]</span>
        <span class="k">for</span> <span class="n">lst</span> <span class="ow">in</span> <span class="n">run_column_tmp</span><span class="p">:</span>
            <span class="n">run_column</span> <span class="o">+=</span> <span class="n">lst</span>
        
        <span class="c1"># Channel column in plot pd.DataFrame</span>
        <span class="n">channel_column</span> <span class="o">=</span> <span class="nb">len</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">included_runs</span><span class="p">)</span><span class="o">*</span><span class="n">slicing</span>
        
        <span class="c1"># Mean and sigma columns in plot pd.DataFrame</span>
        <span class="n">mean_stacked</span> <span class="o">=</span> <span class="n">mean</span><span class="o">.</span><span class="n">flatten</span><span class="p">()</span>
        <span class="n">sigma_stacked</span> <span class="o">=</span> <span class="n">sigma</span><span class="o">.</span><span class="n">flatten</span><span class="p">()</span>
        
        <span class="n">plot_df</span> <span class="o">=</span> <span class="n">pd</span><span class="o">.</span><span class="n">DataFrame</span><span class="p">({</span><span class="s2">&quot;run&quot;</span><span class="p">:</span> <span class="n">run_column</span><span class="p">,</span> <span class="s2">&quot;channel&quot;</span><span class="p">:</span> <span class="n">channel_column</span><span class="p">,</span> <span class="s2">&quot;mean&quot;</span><span class="p">:</span> <span class="n">mean_stacked</span><span class="p">,</span> <span class="s2">&quot;sigma&quot;</span><span class="p">:</span> <span class="n">sigma_stacked</span><span class="p">})</span>
        
        <span class="n">xlabel</span> <span class="o">=</span> <span class="s1">&#39;Run&#39;</span>
        <span class="n">ylabel</span> <span class="o">=</span> <span class="s1">&#39;Amplitude (ADC counts)&#39;</span>
        <span class="n">plot_title</span> <span class="o">=</span> <span class="sa">f</span><span class="s1">&#39;Run </span><span class="si">{</span><span class="n">single_run</span><span class="si">}</span><span class="s1">, Board </span><span class="si">{</span><span class="n">board</span><span class="si">}</span><span class="s1">, mean amplitude over runs&#39;</span>
        
        <span class="nb">super</span><span class="p">()</span><span class="o">.</span><span class="n">_ECAL__plot_variation</span><span class="p">(</span><span class="n">plot_df</span><span class="p">,</span> <span class="s1">&#39;run&#39;</span><span class="p">,</span> <span class="n">xlabel</span><span class="p">,</span> <span class="n">ylabel</span><span class="p">,</span> <span class="n">plot_title</span><span class="p">)</span>
    

<div class="viewcode-block" id="Amplitude.run_variation"><a class="viewcode-back" href="../../index.xhtml#ecalautoanalysis.Amplitude.run_variation">[docs]</a>    <span class="k">def</span> <span class="nf">run_variation</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
        <span class="sd">&quot;&quot;&quot;</span>
<span class="sd">        Plots the evolution of the mean amplitude over every single_run in self.included_runs.</span>
<span class="sd">        Warning: included_runs must be at least of length two.</span>
<span class="sd">        &quot;&quot;&quot;</span>
        <span class="k">try</span><span class="p">:</span>
            <span class="k">if</span> <span class="nb">len</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">included_runs</span><span class="p">)</span>  <span class="o">&lt;=</span> <span class="mi">1</span><span class="p">:</span>
                <span class="k">raise</span> <span class="ne">ValueError</span><span class="p">(</span><span class="s1">&#39;Need at least two runs to plot a variation&#39;</span><span class="p">)</span>
            <span class="k">else</span><span class="p">:</span>    
                <span class="k">for</span> <span class="n">board</span> <span class="ow">in</span> <span class="bp">self</span><span class="o">.</span><span class="n">letters</span><span class="p">:</span>
                    <span class="bp">self</span><span class="o">.</span><span class="n">__run_single_board</span><span class="p">(</span><span class="n">board</span><span class="p">)</span>
        <span class="k">except</span> <span class="ne">ValueError</span> <span class="k">as</span> <span class="n">e</span><span class="p">:</span>
            <span class="nb">print</span><span class="p">(</span><span class="n">e</span><span class="p">)</span></div>
    

    <span class="c1"># ---- STATISTICS OVER RUNS ----</span>
    
    <span class="k">def</span> <span class="nf">__run_colormesh_single_run</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">single_run</span><span class="p">:</span> <span class="nb">int</span><span class="o">=</span><span class="kc">None</span><span class="p">):</span>
        <span class="sd">&quot;&quot;&quot; </span>
<span class="sd">        Plots the colormesh map with the mean amplitude (mu) over self.channel_names for a given single_run.</span>
<span class="sd">        </span>
<span class="sd">        :param single_run: number associated with the run to be analyzed, eg. 15610</span>
<span class="sd">        &quot;&quot;&quot;</span>
        <span class="n">stat_names</span> <span class="o">=</span> <span class="p">[</span><span class="s1">&#39;Mu&#39;</span><span class="p">,</span> <span class="s1">&#39;Mu error&#39;</span><span class="p">,</span> <span class="s1">&#39;Sigma&#39;</span><span class="p">,</span> <span class="s1">&#39;Sigma_error&#39;</span><span class="p">]</span>
        <span class="n">folder</span> <span class="o">=</span>  <span class="bp">self</span><span class="o">.</span><span class="n">raw_data_folder</span> <span class="o">+</span> <span class="nb">str</span><span class="p">(</span><span class="nb">int</span><span class="p">(</span><span class="n">single_run</span><span class="p">))</span>
        <span class="n">run_name</span> <span class="o">=</span> <span class="n">os</span><span class="o">.</span><span class="n">path</span><span class="o">.</span><span class="n">basename</span><span class="p">(</span><span class="n">os</span><span class="o">.</span><span class="n">path</span><span class="o">.</span><span class="n">normpath</span><span class="p">(</span><span class="n">folder</span><span class="p">))</span>
        <span class="nb">print</span><span class="p">(</span><span class="s1">&#39;Run: &#39;</span><span class="p">,</span> <span class="n">run_name</span><span class="p">)</span>
        <span class="n">run_save</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">save_folder</span> <span class="o">+</span> <span class="s1">&#39;/Run &#39;</span> <span class="o">+</span> <span class="nb">str</span><span class="p">(</span><span class="n">run_name</span><span class="p">)</span> <span class="o">+</span> <span class="s1">&#39;/&#39;</span>
        <span class="n">Path</span><span class="p">(</span><span class="n">run_save</span><span class="p">)</span><span class="o">.</span><span class="n">mkdir</span><span class="p">(</span><span class="n">parents</span><span class="o">=</span><span class="kc">True</span><span class="p">,</span> <span class="n">exist_ok</span><span class="o">=</span><span class="kc">True</span><span class="p">)</span>

        <span class="n">mean</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">zeros</span><span class="p">((</span><span class="nb">len</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">numbers</span><span class="p">),</span> <span class="nb">len</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">letters</span><span class="p">)))</span>
        <span class="k">for</span> <span class="n">i</span><span class="p">,</span> <span class="n">board</span> <span class="ow">in</span> <span class="nb">enumerate</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">letters</span><span class="p">):</span>
            <span class="n">run_amp_df</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">__load_stats</span><span class="p">(</span><span class="n">single_run</span><span class="p">,</span> <span class="n">board</span><span class="p">,</span> <span class="s1">&#39;run&#39;</span><span class="p">)</span>
            <span class="n">mean</span><span class="p">[:,</span><span class="n">i</span><span class="p">]</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">array</span><span class="p">(</span><span class="nb">list</span><span class="p">(</span><span class="nb">reversed</span><span class="p">(</span><span class="n">run_amp_df</span><span class="p">[</span><span class="s2">&quot;mu&quot;</span><span class="p">])))</span>

        <span class="n">plot_title</span> <span class="o">=</span> <span class="sa">f</span><span class="s1">&#39;Run </span><span class="si">{</span><span class="n">single_run</span><span class="si">}</span><span class="s1">, mean amplitudes&#39;</span>
        
        <span class="nb">super</span><span class="p">()</span><span class="o">.</span><span class="n">_ECAL__plot_colormesh</span><span class="p">(</span><span class="n">mean</span><span class="p">,</span> <span class="n">plot_title</span><span class="p">)</span>
        
        
<div class="viewcode-block" id="Amplitude.run_colormesh"><a class="viewcode-back" href="../../index.xhtml#ecalautoanalysis.Amplitude.run_colormesh">[docs]</a>    <span class="k">def</span> <span class="nf">run_colormesh</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
        <span class="sd">&quot;&quot;&quot;</span>
<span class="sd">        Plots the colormesh map with the mean amplitude over self.channel_names for every single_run in self.included_runs.</span>
<span class="sd">        &quot;&quot;&quot;</span>
        <span class="c1"># TODO: add path to figure to be saved</span>
        <span class="k">for</span> <span class="n">single_run</span> <span class="ow">in</span> <span class="bp">self</span><span class="o">.</span><span class="n">included_runs</span><span class="p">:</span>
            <span class="bp">self</span><span class="o">.</span><span class="n">__run_colormesh_single_run</span><span class="p">(</span><span class="n">single_run</span><span class="p">)</span></div>
            
            
<span class="c1"># ----------------------------------------------------------------------------------</span>

    <span class="k">def</span> <span class="nf">__resolution_single_board</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">board</span><span class="p">:</span> <span class="nb">str</span><span class="o">=</span><span class="kc">None</span><span class="p">):</span>
        <span class="sd">&quot;&quot;&quot;</span>
<span class="sd">        Plots for each channel in the board given the relative amplitude resolution as a function of the amplitude.</span>
<span class="sd">        </span>
<span class="sd">        :param board: board considered</span>
<span class="sd">        &quot;&quot;&quot;</span>
        <span class="c1"># TODO: exception if only 1 run, check board is within the channels in self.letters</span>
        <span class="n">A_lst</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">zeros</span><span class="p">((</span><span class="nb">len</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">included_runs</span><span class="p">),</span> <span class="nb">len</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">numbers</span><span class="p">)))</span>
        <span class="n">sigma_lst</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">zeros</span><span class="p">((</span><span class="nb">len</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">included_runs</span><span class="p">),</span> <span class="nb">len</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">numbers</span><span class="p">)))</span>
        <span class="n">A_err_lst</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">zeros</span><span class="p">((</span><span class="nb">len</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">included_runs</span><span class="p">),</span> <span class="nb">len</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">numbers</span><span class="p">)))</span>
        <span class="n">sigma_err_lst</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">zeros</span><span class="p">((</span><span class="nb">len</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">included_runs</span><span class="p">),</span> <span class="nb">len</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">numbers</span><span class="p">)))</span>
        
        <span class="k">for</span> <span class="n">i</span><span class="p">,</span> <span class="n">single_run</span> <span class="ow">in</span> <span class="nb">enumerate</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">included_runs</span><span class="p">):</span>
            <span class="n">A_lst</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">get_mean</span><span class="p">(</span><span class="n">single_run</span><span class="p">,</span> <span class="n">board</span><span class="p">)</span>
            <span class="n">sigma_lst</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">get_sigma</span><span class="p">(</span><span class="n">single_run</span><span class="p">,</span> <span class="n">board</span><span class="p">)</span>
            <span class="n">A_err_lst</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">get_mean_err</span><span class="p">(</span><span class="n">single_run</span><span class="p">,</span> <span class="n">board</span><span class="p">)</span>
            <span class="n">sigma_err_lst</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">get_sigma_err</span><span class="p">(</span><span class="n">single_run</span><span class="p">,</span> <span class="n">board</span><span class="p">)</span>

        <span class="k">for</span> <span class="n">j</span><span class="p">,</span> <span class="n">channel</span> <span class="ow">in</span> <span class="nb">enumerate</span><span class="p">([</span><span class="n">board</span><span class="o">+</span><span class="n">number</span> <span class="k">for</span> <span class="n">number</span> <span class="ow">in</span> <span class="bp">self</span><span class="o">.</span><span class="n">numbers</span><span class="p">]):</span>
            <span class="k">if</span> <span class="n">j</span> <span class="o">==</span> <span class="mi">0</span><span class="p">:</span> <span class="c1"># TODO: channel C1 is not working properly</span>
                <span class="k">continue</span>
            <span class="n">guess</span> <span class="o">=</span> <span class="p">[</span><span class="mf">3e-4</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mf">0.04</span><span class="p">]</span> <span class="c1"># TODO: change?</span>
            <span class="n">coeff</span><span class="p">,</span> <span class="n">covar</span> <span class="o">=</span> <span class="n">curve_fit</span><span class="p">(</span><span class="n">sigma_amp_fit</span><span class="p">,</span> <span class="n">A_lst</span><span class="p">[:,</span><span class="n">j</span><span class="p">],</span> <span class="n">sigma_lst</span><span class="p">[:,</span><span class="n">j</span><span class="p">]</span><span class="o">/</span><span class="n">A_lst</span><span class="p">[:,</span><span class="n">j</span><span class="p">],</span> <span class="n">p0</span><span class="o">=</span><span class="n">guess</span><span class="p">)</span>
            
            <span class="n">fig</span> <span class="o">=</span> <span class="n">make_subplots</span><span class="p">(</span><span class="n">specs</span><span class="o">=</span><span class="p">[[{</span><span class="s2">&quot;secondary_y&quot;</span><span class="p">:</span> <span class="kc">False</span><span class="p">}]])</span>
            
            <span class="n">yerror</span> <span class="o">=</span> <span class="n">sigma_lst</span><span class="p">[:,</span><span class="n">j</span><span class="p">]</span><span class="o">/</span><span class="n">A_lst</span><span class="p">[:,</span><span class="n">j</span><span class="p">]</span> <span class="o">*</span> <span class="n">np</span><span class="o">.</span><span class="n">sqrt</span><span class="p">(</span> <span class="p">(</span><span class="n">A_err_lst</span><span class="p">[:,</span><span class="n">j</span><span class="p">]</span><span class="o">/</span><span class="n">A_lst</span><span class="p">[:,</span><span class="n">j</span><span class="p">])</span><span class="o">**</span><span class="mi">2</span> <span class="o">+</span> <span class="p">(</span><span class="n">sigma_err_lst</span><span class="p">[:,</span><span class="n">j</span><span class="p">]</span><span class="o">/</span><span class="n">sigma_lst</span><span class="p">[:,</span><span class="n">j</span><span class="p">])</span><span class="o">**</span><span class="mi">2</span> <span class="p">)</span>
            <span class="n">df_data</span> <span class="o">=</span> <span class="n">pd</span><span class="o">.</span><span class="n">DataFrame</span><span class="p">({</span><span class="s1">&#39;x&#39;</span><span class="p">:</span> <span class="n">A_lst</span><span class="p">[:,</span><span class="n">j</span><span class="p">],</span> <span class="s1">&#39;y&#39;</span><span class="p">:</span> <span class="n">sigma_lst</span><span class="p">[:,</span><span class="n">j</span><span class="p">]</span><span class="o">/</span><span class="n">A_lst</span><span class="p">[:,</span><span class="n">j</span><span class="p">],</span> <span class="s2">&quot;err_x&quot;</span><span class="p">:</span> <span class="n">A_err_lst</span><span class="p">[:,</span><span class="n">j</span><span class="p">],</span> <span class="s2">&quot;err_y&quot;</span><span class="p">:</span> <span class="n">yerror</span><span class="p">})</span>
            
            <span class="n">trace1</span> <span class="o">=</span> <span class="n">px</span><span class="o">.</span><span class="n">scatter</span><span class="p">(</span><span class="n">data_frame</span><span class="o">=</span><span class="n">df_data</span><span class="p">,</span> <span class="n">x</span><span class="o">=</span><span class="s1">&#39;x&#39;</span><span class="p">,</span> <span class="n">y</span><span class="o">=</span><span class="s1">&#39;y&#39;</span><span class="p">,</span> <span class="n">error_x</span><span class="o">=</span><span class="s2">&quot;err_x&quot;</span><span class="p">,</span> <span class="n">error_y</span><span class="o">=</span><span class="s2">&quot;err_y&quot;</span><span class="p">,</span> <span class="n">color_discrete_sequence</span><span class="o">=</span><span class="p">[</span><span class="s2">&quot;Crimson&quot;</span><span class="p">])</span>
            <span class="n">fig</span><span class="o">.</span><span class="n">add_trace</span><span class="p">(</span><span class="n">trace1</span><span class="o">.</span><span class="n">data</span><span class="p">[</span><span class="mi">0</span><span class="p">])</span>
            
            <span class="n">x</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">linspace</span><span class="p">(</span><span class="n">np</span><span class="o">.</span><span class="n">min</span><span class="p">(</span><span class="n">A_lst</span><span class="p">[:,</span><span class="n">j</span><span class="p">]),</span> <span class="n">np</span><span class="o">.</span><span class="n">max</span><span class="p">(</span><span class="n">A_lst</span><span class="p">[:,</span><span class="n">j</span><span class="p">]))</span>
            <span class="n">df_fit</span> <span class="o">=</span> <span class="n">pd</span><span class="o">.</span><span class="n">DataFrame</span><span class="p">({</span><span class="s1">&#39;x&#39;</span><span class="p">:</span> <span class="n">x</span><span class="p">,</span> <span class="s1">&#39;y&#39;</span><span class="p">:</span> <span class="n">sigma_amp_fit</span><span class="p">(</span><span class="n">x</span><span class="p">,</span> <span class="o">*</span><span class="n">coeff</span><span class="p">)})</span>
            <span class="n">trace2</span> <span class="o">=</span> <span class="n">px</span><span class="o">.</span><span class="n">line</span><span class="p">(</span><span class="n">df_fit</span><span class="p">,</span> <span class="n">x</span><span class="o">=</span><span class="s1">&#39;x&#39;</span><span class="p">,</span> <span class="n">y</span><span class="o">=</span><span class="s1">&#39;y&#39;</span><span class="p">)</span>
            <span class="n">fig</span><span class="o">.</span><span class="n">add_trace</span><span class="p">(</span><span class="n">trace2</span><span class="o">.</span><span class="n">data</span><span class="p">[</span><span class="mi">0</span><span class="p">],</span> <span class="n">secondary_y</span><span class="o">=</span><span class="kc">False</span><span class="p">)</span>
            
            <span class="n">plot_title</span> <span class="o">=</span> <span class="sa">f</span><span class="s2">&quot;Amplitude relative resolution, channel </span><span class="si">{</span><span class="n">channel</span><span class="si">}</span><span class="s2">&quot;</span>
            <span class="n">xlabel</span> <span class="o">=</span> <span class="s2">&quot;A (ADC count)&quot;</span>
            <span class="n">ylabel</span> <span class="o">=</span> <span class="s2">&quot;Relative amplitude resolution&quot;</span>
            <span class="n">fig</span><span class="o">.</span><span class="n">update_layout</span><span class="p">(</span><span class="n">title</span><span class="o">=</span><span class="n">plot_title</span><span class="p">,</span>
                              <span class="n">xaxis</span><span class="o">=</span><span class="nb">dict</span><span class="p">(</span><span class="n">title</span><span class="o">=</span><span class="n">xlabel</span><span class="p">),</span>
                              <span class="n">yaxis</span><span class="o">=</span><span class="nb">dict</span><span class="p">(</span><span class="n">title</span><span class="o">=</span><span class="n">ylabel</span><span class="p">))</span>
            
            <span class="n">fig</span><span class="o">.</span><span class="n">update_layout</span><span class="p">(</span><span class="n">updatemenus</span><span class="o">=</span><span class="p">[</span>
                                           <span class="nb">dict</span><span class="p">(</span>
                                               <span class="n">buttons</span> <span class="o">=</span> <span class="p">[</span>
                                                           <span class="nb">dict</span><span class="p">(</span><span class="n">label</span><span class="o">=</span><span class="s2">&quot;Linear&quot;</span><span class="p">,</span>
                                                                <span class="n">method</span><span class="o">=</span><span class="s2">&quot;relayout&quot;</span><span class="p">,</span>
                                                                <span class="n">args</span><span class="o">=</span><span class="p">[{</span><span class="s2">&quot;yaxis.type&quot;</span><span class="p">:</span> <span class="s2">&quot;linear&quot;</span><span class="p">,</span> <span class="s2">&quot;xaxis.type&quot;</span><span class="p">:</span> <span class="s2">&quot;linear&quot;</span><span class="p">}]),</span>
                                                           <span class="nb">dict</span><span class="p">(</span><span class="n">label</span><span class="o">=</span><span class="s2">&quot;Semilog y&quot;</span><span class="p">,</span>
                                                                <span class="n">method</span><span class="o">=</span><span class="s2">&quot;relayout&quot;</span><span class="p">,</span>
                                                                <span class="n">args</span><span class="o">=</span><span class="p">[{</span><span class="s2">&quot;yaxis.type&quot;</span><span class="p">:</span> <span class="s2">&quot;log&quot;</span><span class="p">,</span> <span class="s2">&quot;xaxis.type&quot;</span><span class="p">:</span> <span class="s2">&quot;linear&quot;</span><span class="p">}]),</span>
                                                           <span class="nb">dict</span><span class="p">(</span><span class="n">label</span><span class="o">=</span><span class="s2">&quot;Loglog&quot;</span><span class="p">,</span>
                                                                <span class="n">method</span><span class="o">=</span><span class="s2">&quot;relayout&quot;</span><span class="p">,</span>
                                                                <span class="n">args</span><span class="o">=</span><span class="p">[{</span><span class="s2">&quot;yaxis.type&quot;</span><span class="p">:</span> <span class="s2">&quot;log&quot;</span><span class="p">,</span> <span class="s2">&quot;xaxis.type&quot;</span><span class="p">:</span> <span class="s2">&quot;log&quot;</span><span class="p">}])</span>
                                                         <span class="p">]</span>
                                                <span class="p">)</span>
                                            <span class="p">]</span>
                             <span class="p">);</span>
            
            <span class="c1"># TODO: save figures</span>
            
            <span class="n">fig</span><span class="o">.</span><span class="n">show</span><span class="p">()</span>


<div class="viewcode-block" id="Amplitude.resolution"><a class="viewcode-back" href="../../index.xhtml#ecalautoanalysis.Amplitude.resolution">[docs]</a>    <span class="k">def</span> <span class="nf">resolution</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
        <span class="sd">&quot;&quot;&quot;</span>
<span class="sd">        Plots for each channels in self.channel_names the relative amplitude resolution as a function of the amplitude.</span>
<span class="sd">        &quot;&quot;&quot;</span>
        <span class="k">for</span> <span class="n">board</span> <span class="ow">in</span> <span class="bp">self</span><span class="o">.</span><span class="n">letters</span><span class="p">:</span>
            <span class="bp">self</span><span class="o">.</span><span class="n">__resolution_single_board</span><span class="p">(</span><span class="n">board</span><span class="p">)</span></div></div>
</pre></div>

            <div class="clearer"></div>
          </div>
      </div>
      <div class="clearer"></div>
    </div>
  </body>
</html>